MEMORY

The user values accuracy over speed for computational calculations in the project, but is willing to balance if execution time becomes excessively long.

The user prefers the AI to use a detailed, step-by-step analysis mode rather than a fast batch mode when working through tasks, favoring clarity and thorough reasoning.

The user wants the training workflow to have only one difficulty level, representing the level of a world-class quantitative equity analyst, with logically connected steps where each step depends on the previous, and clear explanations making any technique understandable.

In the UI/frontend code, the user prefers that didactic/teaching tools be visually secondary‚Äîminimal on-screen clutter‚Äîusing non-invasive pop-ups and concise boxes with links to detailed theory pages, ensuring maximum usability, functionality, and intuitiveness.

SEMPRE prima di avviare frontend o backend: 1) Verificare TUTTE le porte attive con netstat -ano | findstr ":5173\|:8080\|:8081\|:8082\|:10000" 2) Terminare TUTTI i processi esistenti con taskkill /PID xxx /F 3) Verificare che tutto sia pulito 4) Avviare UN SOLO frontend e UN SOLO backend 5) Non assumere mai che i processi precedenti siano morti. L'utente ha ragione: creo sempre duplicati se non verifico prima.

The user prefers personalized and specific responses rather than generic ones. They value content that is directly relevant to their project and each rule presented with exhaustive detail down to the smallest point.

USER RULES

1: # üéØ DEFINIZIONE STUDENT ANALYST

---

## **1. IDENTIT√Ä FONDAMENTALE**

**Student Analyst** √® uno strumento di analisi azionaria quantitativa pura che rappresenta la **coesione perfetta** tra:

- **Potenza professionale** al livello dei migliori hedge fund quantitativi al mondo
- **Accessibilit√† totale** per trasformare un completo inesperto in un analista quantitativo esperto

**NON √à:**

- Solo uno strumento educativo
- Solo uno strumento professionale
- Un compromesso che sacrifica qualit√† per semplicit√†

**√à:** La sintesi impossibile che non sacrifica nulla da nessun lato.

### **Motto Progettuale:**

**"La Complessit√† Massima Resa Semplice"**

Ogni tecnica, per quanto avanzata, pu√≤ essere spiegata e resa accessibile con il metodo e il percorso giusti. Non esistono concetti troppo complessi, esistono solo spiegazioni inadeguate.

---

## **2. MISSIONE E OBIETTIVI**

### **Missione Primaria - Obiettivo Doppio:**

1. **Strumento di Analisi Reale**: Fornire analisi azionarie quantitative accurate e affidabili per decisioni di investimento concrete
2. **Trasformazione dell'Utente**: Portare qualsiasi utente (dal principiante assoluto al professionista) a padroneggiare l'analisi quantitativa attraverso la pratica diretta

### **Metodo Fondamentale:**

**"Imparare Facendo"** - L'apprendimento avviene attraverso l'utilizzo pratico del software per analisi reali, non attraverso teoria astratta.

### **Visione a 360¬∞**

**Cosa Fornisce Student Analyst:**

- **Analisi Completa**: Visione totale del titolo/portafoglio
- **Accuratezza Massima**: Risultati affidabili per decisioni reali
- **Sicurezza Decisionale**: Fiducia nei risultati dell'analisi
- **Indirizzamento Intelligente**: Guida senza dire esattamente cosa fare

**Cosa NON Fa:**

- Non prende decisioni al posto dell'utente
- Non fornisce consigli di investimento diretti
- Non semplifica sacrificando accuratezza

---

## **3. STANDARD QUALITATIVI E SOFISTICAZIONE**

### **Livello Target:**

- **Livello Hedge Fund**: Massima qualit√† possibile nei limiti di sviluppo (singola persona + strumenti gratuiti + Claude AI)
- **Accuratezza Professionale**: Le analisi devono essere sufficientemente precise per decisioni di investimento reali
- **Affidabilit√† Assoluta**: I risultati devono fornire sicurezza e indirizzare le decisioni con fiducia

### **Approccio alla Complessit√†:**

- **Complessit√† Massima**: Implementare le tecniche pi√π avanzate possibili
- **Interfaccia Perfetta**: Nascondere la complessit√† dietro UX/UI eccellente
- **Spiegazione Totale**: Ogni elemento complesso deve essere spiegabile e comprensibile

### **Bilanciamento Accuratezza-Velocit√†:**

**Regola Generale:** L'accuratezza √® SEMPRE pi√π importante della velocit√†

**Gestione Intelligente:**

- Valutazione caso per caso per calcoli eccessivamente lenti
- Compromessi solo quando il tempo non giustifica il valore aggiunto
- Soglia di tolleranza per determinare quando un calcolo "costa troppo"
- Mai sacrificare accuratezza per velocit√† senza giustificazione solida

---

## **4. TARGET UTENTE E FILOSOFIA**

### **Target Universale:**

- **Principianti Assoluti**: Che non sanno nulla di finanza
- **Esperti Professionali**: Che vogliono uno strumento potente
- **Aspiranti Analisti**: Che vogliono diventare esperti
- **Investitori Seri**: Che vogliono analisi professionali

### **Principio Fondamentale:**

**"Uno Strumento, Tutti i Livelli"** - Non esistono versioni diverse o livelli di difficolt√†. Un'unica versione perfetta accessibile a tutti.

### **Filosofia Progettuale:**

**Bilanciamento Perfetto:**

- **Potenza Nascosta**: Complessit√† massima sotto interfaccia semplice
- **Educazione Integrata**: Aspetto didattico presente ma non invasivo visivamente
- **Pratica Diretta**: Apprendimento attraverso uso reale, non teoria

**Elementi Educativi (Secondari Visivamente):**

- Box sintetici teorici basati sull'analisi corrente
- Pop-up esplicativi per ogni funzione
- Pagine secondarie per teoria approfondita
- Glossario completo per ogni termine tecnico
- Guide contestuali basate sull'analisi in corso

---

## **5. OBIETTIVI FINALI DELL'UTENTE**

Un utente dedicato che studia e usa Student Analyst deve poter raggiungere **TUTTI** questi obiettivi:

### **A) Comprensione Principi Base**

- Padronanza completa dell'analisi quantitativa
- Comprensione profonda dei mercati finanziari

### **B) Analisi Professionali Autonome**

- Capacit√† di condurre analisi indipendenti
- Sicurezza nelle proprie valutazioni

### **C) Replicazione Strategie Hedge Fund**

- Comprensione e applicazione delle tecniche dei migliori
- Implementazione di strategie quantitative avanzate

### **D) Sviluppo Strategie Proprie**

- Creazione di metodologie personalizzate
- Innovazione nell'analisi quantitativa

---

## **6. LIMITAZIONI E VINCOLI**

### **Limitazioni Accettate - Vincoli di Sviluppo:**

- Sviluppatore singolo
- Solo strumenti online gratuiti
- Budget limitato a Claude AI
- Nessuna licenza dati enterprise

### **Ambizione Nonostante i Limiti:**

Creare qualcosa di **"impossibile"** - uno strumento che sembri un'utopia ma che funzioni realmente, avvicinandosi il pi√π possibile ai software enterprise dei migliori hedge fund.

### **Gestione Limitazioni Tecniche:**

**Raccolta Dati:**

- **Status Attuale**: Yahoo Finance funziona perfettamente senza problemi evidenti
- **Principio Guida**: Mantenere tutto gratuito (eccetto Claude AI)
- **Priorit√† Assoluta**: Revisione e ottimizzazione sistema raccolta/gestione/conservazione dati
- **Approccio**: Trovare il metodo pi√π efficiente entro le limitazioni esistenti

**Filosofia sui Limiti:**

- Accettare le limitazioni come vincoli creativi
- Ottimizzare l'esperienza entro i limiti disponibili
- Esplorare soluzioni creative senza costi aggiuntivi
- Preparare il sistema per futuri potenziamenti economici

---

## **7. STRATEGIA DI IMPLEMENTAZIONE**

### **Approccio Progressivo:**

- **Partenza dalle Essenziali**: Implementazione seguendo il percorso logico dell'utente (Step 1 ‚Üí Step 14)
- **Nulla Scartato Definitivamente**: Ogni tecnica rimane nel workflow fino a valutazione approfondita
- **Prioritizzazione Dinamica**: Le tecniche possono diventare secondarie (educativamente o professionalmente) se necessario
- **Valutazione Continua**: Ogni critica viene analizzata in relazione alla singola tecnica, al progetto complessivo e alla visione generale

### **Criteri di Priorit√†:**

1. Essenzialit√† per il percorso logico dell'analista
2. Rapporto utilit√†/complessit√† implementativa
3. Coerenza con la visione complessiva del progetto
4. Valore educativo vs valore professionale

---

## **8. EVOLUZIONE E ARCHITETTURA**

### **Struttura Ideale:**

- **Piattaforma Robusta**: Fondamenta solide e ben strutturate
- **Pronta al Cambiamento**: Architettura flessibile per evoluzioni future
- **Conservazione Base**: Mantenere e sviluppare le fondamenta gi√† create
- **Crescita Organica**: Espansione progressiva senza stravolgimenti

### **Evoluzione Temporale:**

- **Breve Termine**: Completamento delle funzionalit√† core
- **Medio Termine**: Aggiornamenti e potenziamenti tecnici
- **Lungo Termine**: Espansione con maggiori risorse economiche
- **Continua**: Aggiornamenti per nuove tecniche e metodologie del settore

---

## **9. DEFINIZIONE DI SUCCESSO**

### **Successo Primario - Personale:**

**Student Analyst avr√† successo quando:**

- L'utente (creatore) potr√† usarlo completamente per le proprie analisi
- Il software sapr√† indirizzare verso comprensione e conoscenza in caso di dubbi
- Sar√† pronto a trasformare un principiante in analista esperto fin dal primo utilizzo

### **Successo Secondario - Condivisione Limitata:**

- Utilizzabile da "poche persone selezionate" (amici, professore universitario)
- Uso privato, non commerciale (come "prestare il proprio computer")
- Funzionamento perfetto per ogni utilizzatore del gruppo ristretto

### **Standard di Completezza:**

- **Ogni Tecnica Implementata Perfettamente**: Nessun compromesso sulla qualit√†
- **Percorso Logico Completo**: Dalla scelta ticker alle decisioni finali di investimento
- **Rispecchiamento Reale**: Seguire esattamente i passaggi di un vero analista quantitativo
- **Trasformazione Garantita**: Il software deve essere il veicolo di apprendimento completo

**Nota Importante:** Il successo non dipende dal diventare esperti prima dell'uso, ma dal fatto che il software sia completo e perfetto fin dall'inizio per guidare la trasformazione dell'utente.

---

## **10. OBIETTIVO FINALE NASCOSTO - LA SCOPERTA**

### **Il Paradosso Creativo:**

Poich√© l'utente (creatore) ammette di non conoscere ancora:

- Il fine ultimo dell'analisi azionaria quantitativa pura
- Come lavora realmente un analista azionario quantitativo
- Cosa fa concretamente nella pratica quotidiana

### **Student Analyst come Veicolo di Scoperta:**

Il software diventer√† lo strumento attraverso cui:

- Scoprire cosa significa essere un analista quantitativo azionario
- Comprendere il vero scopo dell'analisi azionaria qunatitativa
- Imparare il workflow reale dei professionisti
- Sviluppare competenze attraverso la pratica diretta

### **La Rivelazione:**

Creare uno strumento professionale per scoprire cosa significa essere professionali - **il software insegner√† al suo creatore cosa voleva creare**.

---

_Versione 2.1 - Definizione Completa e Riordinata_

2: - **Struttura del Progetto**

- Frontend (@package.json)
  - Vite + React su porta 8080/8081
  - Identificabile da `"type": "module"` e dipendenze React/Vite
- Backend (@package.json)
  - Node.js + Express su porta 10000
  - Identificabile da dipendenze `nodemon` e `ts-node`

- **Regole di Sicurezza**

  ```typescript
  // ‚úÖ DO: Verificare sempre la directory corrente
  if (process.cwd().endsWith('backend')) {
    // Comandi backend
  } else {
    // Comandi frontend
  }
  ```

- **Comandi PowerShell**

  ```powershell
  # ‚úÖ DO: Usare ; per separare i comandi
  cd backend ; npm run dev

  # ‚ùå DON'T: Non usare && (non funziona in PowerShell)
  cd backend && npm run dev  # NON FUNZIONA
  ```

- **Avvio Servizi**

  ```bash
  # I due servizi devono essere avviati in due terminali separati

  # BACKEND (dalla root del progetto, primo terminale)
  cd backend ; npm run dev

  # FRONTEND (dalla root del progetto, secondo terminale)
  npm run dev
  ```

- **Best Practices**
  - **Verifica Porta**
    - Backend: 10000
    - Frontend: 8080/8081
    - Controlla i log di avvio
  - **Comandi Distruttivi**

    ```bash
    # ‚úÖ DO: Verificare sempre la directory
    pwd  # controlla dove sei
    npm clean  # solo se directory corretta

    # ‚ùå DON'T: Mai senza verifica
    rm -rf node_modules  # PERICOLOSO
    ```

  - **Gestione Dipendenze**
    - ‚úÖ DO: Installare nella directory corretta
    - ‚ùå DON'T: Mischiare dipendenze frontend/backend
    - Usa `npm list` per verificare

3: # üö® COMANDI CRITICI - REGOLE DI SICUREZZA

## Descrizione

Questa regola definisce i protocolli di sicurezza per l'esecuzione di comandi potenzialmente distruttivi o irreversibili.

## Comandi Critici che Richiedono Autorizzazione Esplicita

- `clean` - Eliminazione di directory build/dist
- `reset` - Reset di configurazioni o stato
- `rimraf` - Rimozione forzata di directory
- `rm -rf` - Rimozione ricorsiva forzata
- Qualsiasi comando che:
  - Elimina file o directory
  - Resetta lo stato del progetto
  - Cancella dati o configurazioni
  - Ripristina versioni precedenti
  - Modifica irreversibilmente lo stato

## Protocollo di Sicurezza

1. **Richiesta Autorizzazione**
   - DEVE essere richiesta autorizzazione esplicita all'utente
   - DEVE spiegare esattamente cosa verr√† eliminato/modificato
   - DEVE attendere conferma positiva prima di procedere

2. **Documentazione Azione**
   - DEVE specificare quali file/directory saranno interessati
   - DEVE elencare le conseguenze dell'azione
   - DEVE fornire steps per ripristino se possibile

3. **Verifica Stato**
   - DEVE verificare se ci sono processi attivi che utilizzano i file target
   - DEVE controllare se ci sono dipendenze critiche
   - DEVE assicurarsi che l'azione non comprometta il sistema

4. **Backup Automatico** (quando possibile)
   - DOVREBBE creare un backup temporaneo prima dell'esecuzione
   - DOVREBBE fornire istruzioni per il ripristino
   - DOVREBBE mantenere un log delle azioni eseguite

## Esempi di Richieste Corrette

```typescript
// ‚úÖ CORRETTO
"Prima di procedere con 'npm run clean', ho bisogno della tua autorizzazione.
Questa azione eliminer√† la directory dist/ che contiene i file compilati.
Vuoi procedere? (Sar√† necessario eseguire 'npm run build' dopo)"

// ‚ùå SBAGLIATO
"Eseguo clean per pulire la build"
```

## Implementazione

- Questa regola DEVE essere seguita da tutti gli agenti AI
- Nessuna eccezione √® permessa per i comandi critici
- In caso di dubbio, trattare il comando come critico

4: # üÜï NUOVE REGOLE - STUDENT ANALYST

> **‚ö†Ô∏è REGOLE APPRESE DURANTE LO SVILUPPO** | [Componenti Analisi](#componenti-analisi) | [Validazione Dati](#validazione-dati) | [Testing](#testing) | [Documentazione](#documentazione)

---

## üö® REGOLE ANTI-REGRESSIONE E DEPLOY STATICI (2024-06)

### **Static Assets & Vercel - SEMPRE OBBLIGATORIO**

- **Verifica SEMPRE** che la configurazione Vercel (`vercel.json`) abbia la chiave `outputDirectory` corretta (es: `"dist"` per Vite) quando usi build tools che non producono output in `public/`.
- **Testa SEMPRE** la raggiungibilit√† di almeno un file statico di test (es: `/logo-test.txt`, `/lovable-uploads/debug-logo.txt`) dopo ogni deploy.
- **Non dare MAI per scontato** che la presenza dei file in `dist/` o `public/` localmente implichi che saranno serviti da Vercel: controlla sempre la root di deploy e la configurazione.
- **Se un asset non si vede ma la build √® corretta**, controlla subito: outputDirectory, root di progetto su Vercel, e la presenza reale del file via URL pubblico.
- **Se un file statico non viene servito, NON modificare il codice React/JSX**: il problema √® quasi sempre di deploy/config.
- **Quando sostituisci asset binari (es: PNG)**, verifica che siano validi e non corrotti sia localmente che dopo il deploy (apri l'URL diretto!).
- **Documenta sempre** la soluzione definitiva nel repo (README o regole) per evitare ricadute future.

### **UI/UX Component Regression - SEMPRE OBBLIGATORIO**

- **Non sostituire MAI componenti custom (es: Select, Dropdown, DatePicker) con elementi HTML nativi** senza motivazione e test visivo: causa regressioni di stile e UX.
- **Quando modifichi un input o una select, verifica SEMPRE che il look sia coerente con il resto dell'app** (soprattutto dopo merge o refactor).
- **Se usi una libreria UI (Shadcn, Radix, HeadlessUI, ecc.), preferisci SEMPRE i componenti custom rispetto agli elementi nativi** per coerenza visiva e accessibilit√†.
- **Dopo ogni refactor di componenti UI, testa manualmente i flussi principali** e confronta con screenshot precedenti.
- **Aggiungi test visivi o screenshot di riferimento** per i componenti critici (dropdown, sidebar, logo, ecc.).
- **Se noti una regressione, ripristina subito il componente custom** e documenta la causa per evitare errori simili.

---

## üß© COMPONENTI ANALISI

### **Protezione Valori Undefined - SEMPRE OBBLIGATORIA**

**Regola**: Ogni modifica futura ai componenti di analisi deve includere protezione contro valori undefined e validazione dei dati.

**Motivazione**: Evita errori `TypeError: Cannot read properties of undefined (reading 'toFixed')` e crash dell'applicazione.

**Implementazione**:

```typescript
// ‚úÖ CORRETTO - Protezione contro undefined
{metric.label || 'Metrica'}
{metric.value || '0%'}
${ticker.price?.toFixed(2) || '0.00'}
{sharpeRatio?.toFixed(2) || '0.00'}

// ‚ùå SBAGLIATO - Nessuna protezione
{metric.label}
{metric.value}
${ticker.price.toFixed(2)}
{sharpeRatio.toFixed(2)}
```

**Checklist Pre-Commit**:

- [ ] Tutti i valori numerici hanno protezione `?.` o `||`
- [ ] Tutti i valori stringa hanno fallback
- [ ] Tutti i valori array hanno `|| []`
- [ ] Tutti i valori oggetto hanno `|| {}`
- [ ] Testato con dati undefined/null

### **Collegamento Dati Reali - SEMPRE OBBLIGATORIO**

**Regola**: Ogni componente di output deve leggere SOLO da `analysisResults` del context, mai da dati statici o placeholder.

**Motivazione**: Garantisce coerenza dei dati e elimina valori finti che confondono l'utente.

**Implementazione**:

```typescript
// ‚úÖ CORRETTO - Dati reali dal context
const { analysisResults } = useAnalysisContext();
const metrics = analysisResults?.performanceMetrics || [];
const volatility = analysisResults?.volatility;

// ‚ùå SBAGLIATO - Dati statici
const metrics = [
  { label: 'Rendimento Totale', value: '15.25%' },
  { label: 'Rendimento Annuo', value: '12.50%' },
];
```

### **Messaggi Utente Professionali - SEMPRE OBBLIGATORIO**

**Regola**: Ogni stato senza dati deve avere un messaggio chiaro che guidi l'utente.

**Implementazione**:

```typescript
// ‚úÖ CORRETTO - Messaggio chiaro e professionale
{!hasData && (
  <div className="text-center text-muted-foreground py-8">
    <p>Avvia un'analisi per vedere le metriche di performance</p>
    <p className="text-sm">Inserisci i simboli dei titoli e clicca su "Avvia Analisi"</p>
  </div>
)}

// ‚ùå SBAGLIATO - Messaggio generico
{!hasData && <div>Nessun dato</div>}
```

---

## üîí VALIDAZIONE DATI

### **Validazione Context - SEMPRE OBBLIGATORIA**

**Regola**: Validare sempre i dati prima di salvarli nel context per evitare errori runtime.

**Implementazione**:

```typescript
// Validazione risultati prima di salvarli
const validatedResults = {
  ...results,
  performanceMetrics:
    results.performanceMetrics?.map(metric => ({
      label: metric.label || 'Metrica',
      value: metric.value || '0%',
    })) || [],
  volatility: results.volatility
    ? {
        annualizedVolatility: results.volatility.annualizedVolatility || 0,
        sharpeRatio: results.volatility.sharpeRatio || 0,
      }
    : null,
  correlation: results.correlation
    ? {
        correlationMatrix: results.correlation.correlationMatrix || {
          symbols: [],
          matrix: [],
        },
        diversificationIndex: results.correlation.diversificationIndex || 0,
        averageCorrelation: results.correlation.averageCorrelation || 0,
      }
    : null,
};
```

### **TypeScript Interfaces - SEMPRE OBBLIGATORIO**

**Regola**: Definire sempre interfacce TypeScript per tutti i dati e props.

**Implementazione**:

```typescript
// ‚úÖ CORRETTO - Interfacce definite
interface PerformanceMetric {
  label: string;
  value: string;
  description?: string;
}

interface VolatilityData {
  annualizedVolatility: number;
  sharpeRatio: number;
}

interface PerformanceMetricsProps {
  data?: PerformanceMetric[];
  onTheoryClick?: () => void;
  className?: string;
}

// ‚ùå SBAGLIATO - Nessuna interfaccia
const PerformanceMetrics = (props: any) => {
```

---

## üö´ CHIAMATE MULTIPLE

### **Protezione API Calls - SEMPRE OBBLIGATORIA**

**Regola**: Prevenire sempre chiamate API multiple con flag di stato non reattivo.

**Implementazione**:

```typescript
const isAnalysisRunning = useRef(false);

const startAnalysis = async () => {
  if (isAnalysisRunning.current) {
    console.log('üö´ Analisi gi√† in corso, ignoro chiamata multipla');
    return;
  }

  isAnalysisRunning.current = true;
  try {
    // ... logica analisi
  } finally {
    isAnalysisRunning.current = false;
  }
};
```

---

## üß™ TESTING

### **Test E2E - SEMPRE OBBLIGATORIO**

**Regola**: Implementare test E2E per tutti i componenti di output e flussi critici.

**Implementazione**:

```typescript
// Test per componenti di output
test.describe('Output Components E2E Tests', () => {
  test('should show no data message when no analysis is performed', async ({
    page,
  }) => {
    await expect(
      page.locator(
        "text=Avvia un'analisi per vedere le metriche di performance"
      )
    ).toBeVisible();
  });

  test('should display performance metrics after analysis', async ({
    page,
  }) => {
    await page.fill('[data-testid="ticker-input"]', 'AAPL,GOOGL');
    await page.click('[data-testid="start-analysis-button"]');
    await page.waitForSelector('[data-testid="performance-metrics"]', {
      timeout: 30000,
    });
    await expect(
      page.locator('[data-testid="performance-metrics"]')
    ).toBeVisible();
  });
});
```

**Coverage Minimo**:

- ‚úÖ **Rendering senza dati** - Verifica messaggi "no data"
- ‚úÖ **Rendering con dati reali** - Verifica visualizzazione corretta
- ‚úÖ **Interazioni utente** - Verifica bottoni teoria e aggiorna
- ‚úÖ **Integrazione componenti** - Verifica sincronizzazione
- ‚úÖ **Gestione errori** - Verifica robustezza con input invalidi
- ‚úÖ **Accessibilit√†** - Verifica struttura e navigazione

### **Test Unitari - SEMPRE OBBLIGATORIO**

**Regola**: Implementare test unitari per ogni componente con coverage >80%.

**Implementazione**:

```typescript
describe('PerformanceMetrics', () => {
  it('should render with no data message when no context is provided', () => {
    render(<PerformanceMetrics />);
    expect(screen.getByText('Avvia un\'analisi per vedere le metriche di performance')).toBeInTheDocument();
  });

  it('should render with real data when provided', () => {
    const mockData = [{ label: 'Rendimento Totale', value: '15.25%' }];
    render(<PerformanceMetrics data={mockData} />);
    expect(screen.getByText('Rendimento Totale')).toBeInTheDocument();
  });
});
```

### **Test Setup - SEMPRE OBBLIGATORIO**

**Regola**: Configurare correttamente Jest e Playwright per evitare errori di setup.

**Implementazione**:

```javascript
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  collectCoverageFrom: ['src/**/*.{ts,tsx}'],
  coverageThreshold: {
    global: { branches: 80, functions: 80, lines: 80, statements: 80 },
  },
};
```

---

## üìö DOCUMENTAZIONE

### **Documentazione Refactoring - SEMPRE OBBLIGATORIA**

**Regola**: Documentare sempre il refactoring con esempi prima/dopo e best practice.

**Implementazione**:

````markdown
# Guida al Refactoring - Componenti di Output

## Prima del Refactoring

```typescript
// ‚ùå DATI STATICI - SBAGLIATO
const metrics = [{ label: 'Rendimento Totale', value: '15.25%' }];
```
````

## Dopo il Refactoring

```typescript
// ‚úÖ DATI REALI DAL CONTEXT - CORRETTO
const { analysisResults } = useAnalysisContext();
const metrics = analysisResults?.performanceMetrics || [];
```

## Best Practice Implementate

- ‚úÖ Protezione valori undefined
- ‚úÖ Fallback robusti
- ‚úÖ Messaggi utente chiari
- ‚úÖ TypeScript interfaces

````

### **Regole Anti-Regressione - SEMPRE OBBLIGATORIO**

**Regola**: Documentare regole anti-regressione per evitare ricadute future.

**Implementazione**:

```markdown
## üö® REGOLE ANTI-REGRESSIONE

### **Protezione Valori Undefined**
- Ogni valore numerico deve avere protezione `?.` o `||`
- Ogni valore stringa deve avere fallback
- Ogni valore array deve avere `|| []`
- Ogni valore oggetto deve avere `|| {}`

### **Validazione Context**
- Validare sempre i dati prima di salvarli nel context
- Implementare fallback per ogni campo
- Testare con dati edge case

### **Prevenzione Chiamate Multiple**
- Usare flag di stato non reattivo
- Prevenire chiamate API multiple
- Gestire stati di loading correttamente
````

---

## üéØ OPERATIONAL PROMPT

### **Prompt per Refactoring Completo - SEMPRE OBBLIGATORIO**

**Regola**: Usare sempre un prompt operativo strutturato per refactoring complessi.

**Implementazione**:

```markdown
# PROMPT OPERATIVO PER COLLEGAMENTO STEP ANALISI DATI

## REGOLE CRITICHE DA RISPETTARE

- Non fare mai supposizioni su nomi di variabili, funzioni o file
- Leggi sempre il file target prima di modificare
- Ogni componente di output deve leggere solo da analysisResults del context
- Non usare mai dati statici, random, di copertina o placeholder
- Proteggi ogni valore numerico con fallback (?. o ||)
- Valida sempre i dati prima di salvarli nel context
- Previeni chiamate API multiple con flag di stato non reattivo

## PERCORSO OPERATIVO

1. **Step 1: Mappatura** - Mappa tutti i componenti di output
2. **Step 2: Refactor Componenti** - Refactorizza ogni componente
3. **Step 3: Azioni e Sincronizzazione** - Collega bottoni e logica
4. **Step 4: Test e Documentazione** - Aggiungi test e documenta
```

---

## üîß TROUBLESHOOTING

### **Errori Comuni - SEMPRE DOCUMENTARE**

**Regola**: Documentare sempre le soluzioni per errori comuni.

**Implementazione**:

````markdown
## üîß Troubleshooting Comune

### **Errore: "Cannot read properties of undefined"**

```typescript
// ‚úÖ SOLUZIONE
const value = data?.price?.toFixed(2) || '0.00';
```
````

### **Errore: "Component not rendering"**

```typescript
// ‚úÖ SOLUZIONE
{(data || []).map(item => <div>{item.name || 'N/A'}</div>)}
```

### **Errore: "Multiple API calls"**

```typescript
// ‚úÖ SOLUZIONE
const isRunning = useRef(false);
if (isRunning.current) return;
isRunning.current = true;
// ... logica
isRunning.current = false;
```

```

---

## üéØ REGOLE FINALI

1. **Ogni componente di analisi DEVE avere protezione contro undefined**
2. **Ogni context DEVE validare i dati prima di salvarli**
3. **Ogni funzione async DEVE prevenire chiamate multiple**
4. **Ogni valore numerico DEVE avere fallback per toFixed()**
5. **Ogni modifica DEVE essere testata con dati edge case**
6. **Ogni refactoring DEVE essere documentato con esempi**
7. **Ogni componente DEVE avere test E2E e unitari**
8. **Ogni errore comune DEVE avere soluzione documentata**
9. **Ogni prompt operativo DEVE essere strutturato e completo**
10. **Ogni regola anti-regressione DEVE essere implementata**

**‚ö†Ô∏è IMPORTANTE**: Queste regole sono critiche per la stabilit√† dell'applicazione. Non ignorare mai.

---

## üìä METRICHE DI QUALIT√Ä

### **Checklist Pre-Commit OBBLIGATORIA**

- [ ] Tutti i valori numerici hanno protezione `?.` o `||`
- [ ] Tutti i valori stringa hanno fallback
- [ ] Tutti i valori array hanno `|| []`
- [ ] Tutti i valori oggetto hanno `|| {}`
- [ ] Testato con dati undefined/null
- [ ] TypeScript check passa (`tsc --noEmit`)
- [ ] Test E2E passano
- [ ] Test unitari passano (se implementati)
- [ ] Commit message convenzionale
- [ ] Documentazione aggiornata
- [ ] Regole anti-regressione rispettate

### **Metriche Minime**

- **Coverage Test**: >80% per componenti critici
- **Test E2E**: 1 test per ogni componente di output
- **TypeScript**: 0 errori di tipo
- **Fallback**: 100% dei valori protetti
- **Documentazione**: 1 guida per ogni refactoring complesso
```

5:  
5: # üñ•Ô∏è RENDER BACKEND DEPLOYMENT - STUDENT ANALYST

> **‚ö†Ô∏è REGOLE CRITICHE DI DEPLOYMENT** | [Render Setup](#render-setup) | [Build Pipeline](#build-pipeline) | [Health Checks](#health-checks) | [Troubleshooting](#troubleshooting)

---

## üö® CRITICAL DEPLOYMENT RULES

### **SICUREZZA ASSOLUTA**

- **NON MAI** committare secrets, API keys, o database URLs
- **SEMPRE** usare environment variables per configurazioni
- **VERIFICARE** che non ci siano hardcoded values
- **CONTROLLARE** ogni file prima del push
- **SANITIZZARE** tutti gli input utente
- **VALIDARE** tutti i parametri API

### **HEALTH CHECK OBBLIGATORIO**

- **SEMPRE** implementare endpoint `/health` con test completi
- **VERIFICARE** che health check risponda correttamente
- **MONITORARE** logs dopo ogni deploy
- **TESTARE** endpoint dopo rollback
- **CONTROLLARE** database connectivity
- **VERIFICARE** external API status

---

## üñ•Ô∏è RENDER SETUP - CONFIGURAZIONE OBBLIGATORIA

### **Stack Tecnologico**

- **Runtime**: Node.js 18.x o superiore
- **Framework**: Express.js con TypeScript
- **Database**: PostgreSQL
- **Cache**: Redis (opzionale)
- **External APIs**: Alpha Vantage, Yahoo Finance
- **URL**: https://student-analyst.onrender.com
- **Frontend**: https://student-analyst.vercel.app

### **Procfile - SEMPRE OBBLIGATORIO**

```
web: npm run start
```

### **package.json Scripts - SEMPRE OBBLIGATORI**

```json
{
  "scripts": {
    "start": "node dist/index.js",
    "build": "tsc",
    "dev": "nodemon src/index.ts",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "type-check": "tsc --noEmit",
    "lint": "eslint src --ext .ts,.tsx",
    "lint:fix": "eslint src --ext .ts,.tsx --fix",
    "build:check": "npm run type-check && npm run lint && npm run build",
    "predeploy": "npm run build:check && npm run test"
  }
}
```

### **tsconfig.json - CONFIGURAZIONE CRITICA PER RENDER**

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "removeComments": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitOverride": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/routes/*": ["src/routes/*"],
      "@/services/*": ["src/services/*"],
      "@/middleware/*": ["src/middleware/*"],
      "@/utils/*": ["src/utils/*"],
      "@/types/*": ["src/types/*"]
    }
  },
  "include": ["src/**/*", "tests/**/*"],
  "exclude": ["node_modules", "dist", "coverage", "*.test.ts", "*.spec.ts"]
}
```

### **Health Check Endpoint - SEMPRE OBBLIGATORIO**

```typescript
// src/routes/health.ts
import { Router, Request, Response } from 'express';
import { Pool } from 'pg';

const router = Router();

interface HealthStatus {
  status: 'ok' | 'error';
  timestamp: string;
  version: string;
  environment: string;
  uptime: number;
  memory: {
    used: number;
    total: number;
    percentage: number;
  };
  database?: {
    status: 'connected' | 'disconnected' | 'error';
    responseTime?: number;
  };
  externalApis?: {
    alphaVantage?: 'ok' | 'error';
    yahooFinance?: 'ok' | 'error';
  };
  services: {
    [key: string]: 'ok' | 'error';
  };
}

router.get('/health', async (req: Request, res: Response) => {
  const startTime = Date.now();
  const healthStatus: HealthStatus = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    uptime: process.uptime(),
    memory: {
      used: process.memoryUsage().heapUsed,
      total: process.memoryUsage().heapTotal,
      percentage:
        (process.memoryUsage().heapUsed / process.memoryUsage().heapTotal) *
        100,
    },
    services: {},
  };

  try {
    // Database health check
    if (process.env.DATABASE_URL) {
      const pool = new Pool({ connectionString: process.env.DATABASE_URL });
      const dbStartTime = Date.now();

      try {
        await pool.query('SELECT 1');
        healthStatus.database = {
          status: 'connected',
          responseTime: Date.now() - dbStartTime,
        };
      } catch (error) {
        healthStatus.database = { status: 'error' };
        healthStatus.status = 'error';
      } finally {
        await pool.end();
      }
    }

    // External APIs health check
    healthStatus.externalApis = {};

    // Alpha Vantage API check
    if (process.env.ALPHA_VANTAGE_API_KEY) {
      try {
        const response = await fetch(
          `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=AAPL&interval=1min&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`
        );
        healthStatus.externalApis.alphaVantage = response.ok ? 'ok' : 'error';
      } catch (error) {
        healthStatus.externalApis.alphaVantage = 'error';
      }
    }

    // Service-specific checks
    healthStatus.services = {
      express: 'ok',
      cors: 'ok',
      rateLimit: 'ok',
      sanitization: 'ok',
    };

    const responseTime = Date.now() - startTime;

    res.status(healthStatus.status === 'ok' ? 200 : 503).json({
      ...healthStatus,
      responseTime,
    });
  } catch (error) {
    healthStatus.status = 'error';
    res.status(503).json({
      ...healthStatus,
      error: error instanceof Error ? error.message : 'Unknown error',
    });
  }
});

export default router;
```

### **Environment Variables - SICUREZZA ASSOLUTA**

```bash
# MAI committare questi valori - solo in Render Dashboard

# Core Configuration
NODE_ENV=production
PORT=10000

# Database
DATABASE_URL=postgresql://username:password@host:port/database
DATABASE_SSL=true
DATABASE_POOL_SIZE=10
DATABASE_IDLE_TIMEOUT=30000

# Authentication & Security
JWT_SECRET=your-super-secret-key-here-minimum-32-characters
JWT_EXPIRES_IN=24h
JWT_REFRESH_SECRET=your-refresh-secret-key-here
JWT_REFRESH_EXPIRES_IN=7d

# External APIs
ALPHA_VANTAGE_API_KEY=your-alpha-vantage-api-key
YAHOO_FINANCE_API_KEY=your-yahoo-finance-api-key
ALPHA_VANTAGE_BASE_URL=https://www.alphavantage.co/query
YAHOO_FINANCE_BASE_URL=https://query1.finance.yahoo.com/v8/finance

# CORS & Networking
CORS_ORIGIN=https://student-analyst.vercel.app
CORS_CREDENTIALS=true
CORS_MAX_AGE=86400

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_MESSAGE=Too many requests from this IP

# Render Specific
RENDER_EXTERNAL_URL=https://student-analyst.onrender.com
RENDER_SERVICE_NAME=student-analyst-backend
RENDER_SERVICE_ID=your-service-id

# Logging
LOG_LEVEL=info
LOG_FORMAT=json
ENABLE_REQUEST_LOGGING=true

# Cache Configuration
REDIS_URL=redis://username:password@host:port
CACHE_TTL=3600
CACHE_MAX_SIZE=1000

# Performance
REQUEST_TIMEOUT=30000
RESPONSE_TIMEOUT=30000
MAX_REQUEST_SIZE=10mb

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
HEALTH_CHECK_INTERVAL=30000
```

### **Environment Validation - SEMPRE OBBLIGATORIO**

```typescript
// src/utils/envValidator.ts
import { config } from 'dotenv';

config();

interface EnvironmentConfig {
  NODE_ENV: string;
  PORT: number;
  DATABASE_URL: string;
  JWT_SECRET: string;
  ALPHA_VANTAGE_API_KEY: string;
  CORS_ORIGIN: string;
  RENDER_EXTERNAL_URL: string;
}

const requiredEnvVars: (keyof EnvironmentConfig)[] = [
  'NODE_ENV',
  'PORT',
  'DATABASE_URL',
  'JWT_SECRET',
  'ALPHA_VANTAGE_API_KEY',
  'CORS_ORIGIN',
  'RENDER_EXTERNAL_URL',
];

export function validateEnvironment(): EnvironmentConfig {
  const missingVars: string[] = [];

  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      missingVars.push(envVar);
    }
  }

  if (missingVars.length > 0) {
    throw new Error(
      `Missing required environment variables: ${missingVars.join(', ')}`
    );
  }

  // Validate JWT_SECRET length
  if (process.env.JWT_SECRET!.length < 32) {
    throw new Error('JWT_SECRET must be at least 32 characters long');
  }

  // Validate PORT
  const port = parseInt(process.env.PORT!);
  if (isNaN(port) || port < 1 || port > 65535) {
    throw new Error('PORT must be a valid port number (1-65535)');
  }

  return {
    NODE_ENV: process.env.NODE_ENV!,
    PORT: port,
    DATABASE_URL: process.env.DATABASE_URL!,
    JWT_SECRET: process.env.JWT_SECRET!,
    ALPHA_VANTAGE_API_KEY: process.env.ALPHA_VANTAGE_API_KEY!,
    CORS_ORIGIN: process.env.CORS_ORIGIN!,
    RENDER_EXTERNAL_URL: process.env.RENDER_EXTERNAL_URL!,
  };
}

export const envConfig = validateEnvironment();
```

---

## üîß GIT & COMMIT RULES - STANDARDS OBBLIGATORI

### **Conventional Commits - SEMPRE OBBLIGATORIO**

```bash
# Formato: <type>[scope]: <description>
feat(api): add financial data analysis endpoint
fix(ui): resolve chart rendering issue in dashboard
docs(readme): update deployment instructions
refactor(cache): optimize IndexedDB storage strategy
test(e2e): add user authentication flow tests
chore(deps): update Vite to latest version

# Breaking changes
feat!: breaking change in API response format
# oppure
BREAKING CHANGE: API now returns data in new format

# Esempi specifici per Student Analyst
feat(api): add Alpha Vantage integration for real-time stock data
fix(backend): resolve TypeScript compilation errors in batchProcessor
refactor(cache): implement three-tier caching system
test(api): add comprehensive financial API endpoint tests
docs(deploy): update Render deployment troubleshooting guide
chore(deps): update Express.js to v4.18.2 for security patches
```

### **Branch Naming - SEMPRE OBBLIGATORIO**

```bash
# Feature branches
feature/financial-data-api
feature/user-authentication
feature/real-time-charts
feature/cache-optimization

# Fix branches
fix/api-error-handling
fix/typescript-compilation
fix/cors-configuration
fix/health-check-endpoint

# Refactor branches
refactor/cache-system
refactor/api-structure
refactor/error-handling
refactor/security-middleware

# Documentation branches
docs/vercel-deployment
docs/render-troubleshooting
docs/api-documentation
docs/security-guidelines

# Testing branches
test/e2e-coverage
test/api-integration
test/performance-benchmarks
test/security-tests

# Hotfix branches
hotfix/critical-security-fix
hotfix/deployment-failure
hotfix/api-timeout
hotfix/database-connection
```

### **Workflow Operativo - SEMPRE OBBLIGATORIO**

```bash
# 1. Crea feature branch da main
git checkout main
git pull origin main
git checkout -b feature/nome-feature

# 2. Sviluppa e committa
git add .
git commit -m "feat(scope): description"

# 3. Push e crea PR
git push origin feature/nome-feature
# Crea Pull Request su GitHub

# 4. Dopo merge, elimina branch
git checkout main
git pull origin main
git branch -d feature/nome-feature

# 5. Verifica deploy
curl -f https://student-analyst.onrender.com/health
```

### **Pull Request Template - SEMPRE OBBLIGATORIO**

```markdown
## üìã Descrizione

Breve descrizione delle modifiche implementate

## ‚úÖ Checklist

- [ ] Aggiunta nuova funzionalit√†
- [ ] Fix bug esistente
- [ ] Refactoring codice
- [ ] Aggiornamento documentazione
- [ ] Test coverage >80%
- [ ] TypeScript check passa
- [ ] ESLint check passa
- [ ] Build locale funziona

## üß™ Testing

- [ ] Unit tests passano
- [ ] E2E tests passano
- [ ] Testato localmente
- [ ] Health check funziona
- [ ] API endpoints testati
- [ ] CORS configuration verificata
- [ ] Rate limiting testato

## üìã Quality

- [ ] Codice segue coding standards
- [ ] Documentazione aggiornata
- [ ] Commit messages convenzionali
- [ ] Nessun console.log o debug code
- [ ] Error handling implementato
- [ ] Input validation attiva
- [ ] Security measures implementate

## üîí Security

- [ ] Nessun secret hardcoded
- [ ] Input sanitization attiva
- [ ] Rate limiting configurato
- [ ] CORS origin specifico
- [ ] JWT authentication verificata

## üöÄ Deployment

- [ ] Environment variables configurate
- [ ] Procfile aggiornato
- [ ] Build script funziona
- [ ] Health check endpoint attivo
- [ ] Logs verificati

## üîó Riferimenti

Fixes #123
Related to #456
```

---

## üöÄ DEPLOYMENT WORKFLOW - REGOLE CRITICHE

### **Pre-Deploy Checklist - SEMPRE VERIFICARE**

- [ ] TypeScript check passa (`tsc --noEmit`)
- [ ] Lint check passa (`npm run lint`)
- [ ] Tests passano (`npm run test`)
- [ ] Build locale funziona (`npm run build`)
- [ ] Environment variables configurate in Render
- [ ] Health check endpoint implementato
- [ ] CORS configurato per frontend Vercel
- [ ] Database connection testato
- [ ] External APIs funzionanti
- [ ] Rate limiting configurato
- [ ] Security middleware attivo

### **Deploy Process - SEMPRE SEGUIRE**

```bash
# 1. Verifica locale completa
npm run type-check
npm run lint
npm run test
npm run build

# 2. Test health check locale
curl -f http://localhost:10000/health

# 3. Test API endpoints locali
curl -f http://localhost:10000/api/test
curl -f http://localhost:10000/api/financial/AAPL

# 4. Commit e push
git add .
git commit -m "feat(api): add new endpoint"
git push origin main

# 5. Monitora deploy su Render Dashboard
# 6. Verifica health check
curl -f https://student-analyst.onrender.com/health

# 7. Test API endpoints
curl -f https://student-analyst.onrender.com/api/test
curl -f https://student-analyst.onrender.com/api/financial/AAPL
```

### **Post-Deploy Verification - SEMPRE OBBLIGATORIO**

```bash
# Health check completo
curl -f https://student-analyst.onrender.com/health

# API test
curl -f https://student-analyst.onrender.com/api/test

# Financial API test
curl -f https://student-analyst.onrender.com/api/financial/AAPL

# CORS test
curl -H "Origin: https://student-analyst.vercel.app" \
     -H "Access-Control-Request-Method: GET" \
     -H "Access-Control-Request-Headers: Content-Type" \
     -X OPTIONS \
     https://student-analyst.onrender.com/api/financial/AAPL

# Rate limiting test
for i in {1..5}; do
  curl -f https://student-analyst.onrender.com/api/test
  sleep 1
done

# Performance test
curl -w "@curl-format.txt" -o /dev/null -s https://student-analyst.onrender.com/health
```

---

## üîí SECURITY RULES - SEMPRE OBBLIGATORIE

### **Authentication & Authorization**

```typescript
// src/middleware/auth.ts
import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    email: string;
    role: string;
    permissions: string[];
  };
}

export const authenticateToken = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({
      error: 'Access token required',
      code: 'MISSING_TOKEN',
    });
  }

  jwt.verify(token, process.env.JWT_SECRET!, (err: any, decoded: any) => {
    if (err) {
      return res.status(403).json({
        error: 'Invalid or expired token',
        code: 'INVALID_TOKEN',
      });
    }

    req.user = {
      id: decoded.id,
      email: decoded.email,
      role: decoded.role,
      permissions: decoded.permissions || [],
    };

    next();
  });
};

export const requireRole = (roles: string[]) => {
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        code: 'AUTH_REQUIRED',
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        error: 'Insufficient permissions',
        code: 'INSUFFICIENT_PERMISSIONS',
      });
    }

    next();
  };
};

export const requirePermission = (permission: string) => {
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        code: 'AUTH_REQUIRED',
      });
    }

    if (!req.user.permissions.includes(permission)) {
      return res.status(403).json({
        error: 'Permission denied',
        code: 'PERMISSION_DENIED',
      });
    }

    next();
  };
};
```

### **CORS Configuration - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/cors.ts
import cors from 'cors';

const allowedOrigins = [
  'https://student-analyst.vercel.app',
  'https://student-analyst-git-main.vercel.app',
  'https://student-analyst-git-feature.vercel.app',
  'http://localhost:3000',
  'http://localhost:5173',
];

const corsOptions = {
  origin: (
    origin: string | undefined,
    callback: (err: Error | null, allow?: boolean) => void
  ) => {
    // Allow requests with no origin (like mobile apps or curl requests)
    if (!origin) return callback(null, true);

    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  optionsSuccessStatus: 200,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: [
    'Origin',
    'X-Requested-With',
    'Content-Type',
    'Accept',
    'Authorization',
    'X-API-Key',
  ],
  exposedHeaders: ['X-Total-Count', 'X-Page-Count'],
  maxAge: 86400, // 24 hours
};

export const corsMiddleware = cors(corsOptions);
```

### **Rate Limiting - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/rateLimit.ts
import rateLimit from 'express-rate-limit';
import RedisStore from 'rate-limit-redis';
import Redis from 'ioredis';

const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');

// General API rate limiting
export const generalLimiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args: string[]) => redis.call(...args),
  }),
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'), // 15 minutes
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100'), // limit each IP to 100 requests per windowMs
  message: {
    error: process.env.RATE_LIMIT_MESSAGE || 'Too many requests from this IP',
    code: 'RATE_LIMIT_EXCEEDED',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: req => {
    return req.ip || req.connection.remoteAddress || 'unknown';
  },
  skip: req => {
    // Skip rate limiting for health checks
    return req.path === '/health';
  },
});

// Financial API specific rate limiting (more restrictive)
export const financialApiLimiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args: string[]) => redis.call(...args),
  }),
  windowMs: 60 * 1000, // 1 minute
  max: 30, // limit each IP to 30 requests per minute for financial data
  message: {
    error:
      'Too many financial data requests. Please wait before making more requests.',
    code: 'FINANCIAL_RATE_LIMIT_EXCEEDED',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: req => {
    return req.ip || req.connection.remoteAddress || 'unknown';
  },
});

// Authentication rate limiting (very restrictive)
export const authLimiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args: string[]) => redis.call(...args),
  }),
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 login attempts per 15 minutes
  message: {
    error: 'Too many authentication attempts. Please try again later.',
    code: 'AUTH_RATE_LIMIT_EXCEEDED',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: req => {
    return req.ip || req.connection.remoteAddress || 'unknown';
  },
});
```

### **Input Validation & Sanitization - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/validation.ts
import { body, param, query, validationResult } from 'express-validator';
import { Request, Response, NextFunction } from 'express';

// Financial data validation
export const validateFinancialData = [
  body('symbol')
    .isString()
    .isLength({ min: 1, max: 10 })
    .matches(/^[A-Z]{1,10}$/)
    .withMessage('Symbol must be 1-10 uppercase letters'),

  body('timeframe')
    .isIn(['1d', '1w', '1m', '3m', '1y', '5y', 'max'])
    .withMessage('Invalid timeframe'),

  body('interval')
    .optional()
    .isIn([
      '1min',
      '5min',
      '15min',
      '30min',
      '60min',
      'daily',
      'weekly',
      'monthly',
    ])
    .withMessage('Invalid interval'),

  body('limit')
    .optional()
    .isInt({ min: 1, max: 1000 })
    .withMessage('Limit must be between 1 and 1000'),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation failed',
        code: 'VALIDATION_ERROR',
        details: errors.array(),
      });
    }
    next();
  },
];

// User authentication validation
export const validateLogin = [
  body('email').isEmail().normalizeEmail().withMessage('Valid email required'),

  body('password')
    .isLength({ min: 8 })
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/)
    .withMessage(
      'Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character'
    ),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation failed',
        code: 'VALIDATION_ERROR',
        details: errors.array(),
      });
    }
    next();
  },
];

// URL parameter validation
export const validateSymbol = [
  param('symbol')
    .isString()
    .isLength({ min: 1, max: 10 })
    .matches(/^[A-Z]{1,10}$/)
    .withMessage('Symbol must be 1-10 uppercase letters'),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Invalid symbol parameter',
        code: 'INVALID_SYMBOL',
        details: errors.array(),
      });
    }
    next();
  },
];

// Query parameter validation
export const validateQueryParams = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Page must be a positive integer'),

  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Limit must be between 1 and 100'),

  query('sort')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Sort must be either asc or desc'),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Invalid query parameters',
        code: 'INVALID_QUERY_PARAMS',
        details: errors.array(),
      });
    }
    next();
  },
];
```

### **Input Sanitization - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/sanitization.ts
import { Request, Response, NextFunction } from 'express';
import DOMPurify from 'isomorphic-dompurify';

interface SanitizedRequest extends Request {
  body: any;
  query: any;
  params: any;
}

export const sanitizeInput = (
  req: SanitizedRequest,
  res: Response,
  next: NextFunction
) => {
  // Sanitize request body
  if (req.body) {
    req.body = sanitizeObject(req.body);
  }

  // Sanitize query parameters
  if (req.query) {
    req.query = sanitizeObject(req.query);
  }

  // Sanitize URL parameters
  if (req.params) {
    req.params = sanitizeObject(req.params);
  }

  next();
};

function sanitizeObject(obj: any): any {
  if (typeof obj !== 'object' || obj === null) {
    return typeof obj === 'string' ? DOMPurify.sanitize(obj) : obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(item => sanitizeObject(item));
  }

  const sanitized: any = {};
  for (const [key, value] of Object.entries(obj)) {
    sanitized[key] = sanitizeObject(value);
  }

  return sanitized;
}

// Specific sanitization for financial data
export const sanitizeFinancialData = (
  req: SanitizedRequest,
  res: Response,
  next: NextFunction
) => {
  if (req.body.symbol) {
    req.body.symbol = req.body.symbol
      .toString()
      .toUpperCase()
      .replace(/[^A-Z]/g, '');
  }

  if (req.body.timeframe) {
    const allowedTimeframes = ['1d', '1w', '1m', '3m', '1y', '5y', 'max'];
    if (!allowedTimeframes.includes(req.body.timeframe)) {
      return res.status(400).json({
        error: 'Invalid timeframe',
        code: 'INVALID_TIMEFRAME',
      });
    }
  }

  next();
};
```

---

## üö® TROUBLESHOOTING - REGOLE CRITICHE

### **Build Errors - SEMPRE VERIFICARE**

```bash
# 1. TypeScript check
tsc --noEmit

# 2. Lint check
npm run lint

# 3. Test check
npm run test

# 4. Build check
npm run build

# 5. Check for specific errors
grep -r "any" src/ --include="*.ts"
grep -r "console.log" src/ --include="*.ts"
grep -r "TODO" src/ --include="*.ts"
```

### **Common TypeScript Errors - SOLUZIONI SPECIFICHE**

```bash
# Error: Cannot find module
npm install @types/node @types/express

# Error: Property does not exist on type
# Aggiungi interfaccia o usa type assertion

# Error: Object is possibly undefined
# Usa optional chaining (?.) o nullish coalescing (??)

# Error: Type is not assignable
# Verifica tipi e usa type guards
```

### **Deployment Issues - CHECKLIST OBBLIGATORIA**

- [ ] Environment variables configurate in Render Dashboard
- [ ] Procfile presente e corretto
- [ ] Health check endpoint funzionante
- [ ] Build locale funziona
- [ ] Tests passano
- [ ] TypeScript check passa
- [ ] CORS configurato correttamente
- [ ] Database connection attiva
- [ ] External APIs funzionanti
- [ ] Rate limiting configurato
- [ ] Security middleware attivo

### **Specific Error Solutions - BASATE SUI PROBLEMI RISOLTI**

```bash
# Error: 404 Not Found
# Verifica che il server stia girando su dist/index.js
# Controlla che il Procfile sia corretto

# Error: 400 Bad Request
# Verifica sanitization middleware
# Controlla input validation

# Error: 500 Internal Server Error
# Controlla logs su Render Dashboard
# Verifica database connection
# Controlla external API calls

# Error: CORS issues
# Verifica CORS configuration
# Controlla allowed origins

# Error: Rate limiting
# Verifica Redis connection
# Controlla rate limit configuration
```

### **Log Analysis - PATTERNS CRITICI**

```bash
# Cerca errori nei logs
grep -i "error" logs.txt

# Cerca timeout
grep -i "timeout" logs.txt

# Cerca memory issues
grep -i "memory" logs.txt

# Cerca database errors
grep -i "database\|postgres\|connection" logs.txt

# Cerca API errors
grep -i "api\|fetch\|request" logs.txt
```

### **Common Fixes - SEMPRE VERIFICARE**

```bash
# Clear cache
rm -rf node_modules package-lock.json
npm install

# Clear build cache
rm -rf dist/
npm run build

# Restart service
# Render Dashboard > Manual Deploy > Restart service

# Check logs
# Render Dashboard > Logs

# Verify environment variables
# Render Dashboard > Environment

# Test health check
curl -f https://student-analyst.onrender.com/health

# Test API endpoints
curl -f https://student-analyst.onrender.com/api/test
```

---

## ‚úÖ BEST PRACTICES CHECKLIST

### **Pre-Deploy - SEMPRE VERIFICARE**

- [ ] TypeScript strict mode attivo
- [ ] Tutti gli errori gestiti con try/catch
- [ ] Environment variables configurate
- [ ] Tests passano (>80% coverage)
- [ ] Lint passa senza errori
- [ ] Build locale funziona
- [ ] Health check endpoint attivo
- [ ] Database connection testata
- [ ] External APIs funzionanti
- [ ] Security middleware attivo
- [ ] Rate limiting configurato
- [ ] CORS configuration corretta

### **Code Quality - SEMPRE VERIFICARE**

- [ ] Nessun `any` in TypeScript
- [ ] Interfacce definite per tutti i data
- [ ] Error handling implementato
- [ ] Input validation attiva
- [ ] Input sanitization attiva
- [ ] Rate limiting configurato
- [ ] CORS configurato correttamente
- [ ] Logging implementato
- [ ] Metrics collection attiva
- [ ] Performance monitoring attivo

### **Security - SEMPRE VERIFICARE**

- [ ] Nessun secret hardcoded
- [ ] JWT authentication implementata
- [ ] Input validation implementata
- [ ] Input sanitization implementata
- [ ] Rate limiting attivo
- [ ] HTTPS sempre
- [ ] CORS origin specifico
- [ ] SQL injection prevention
- [ ] XSS protection
- [ ] CSRF protection

---

## üéØ QUICK REFERENCE

### **Comandi Critici**

```bash
# Development
npm run dev          # Nodemon dev server
npm run build        # TypeScript build
npm run test         # Run tests
npm run lint         # ESLint check
tsc --noEmit         # TypeScript check

# Deployment
git push origin main # Trigger Render deploy
curl https://student-analyst.onrender.com/health # Health check

# Troubleshooting
npm run type-check   # TypeScript check
npm run test:coverage # Test coverage
# Render Dashboard > Logs # View logs

# Testing
curl -f https://student-analyst.onrender.com/health
curl -f https://student-analyst.onrender.com/api/test
curl -f https://student-analyst.onrender.com/api/financial/AAPL
```

### **File Critici**

- `Procfile` - Render configuration
- `package.json` - Scripts and dependencies
- `tsconfig.json` - TypeScript configuration
- `src/routes/health.ts` - Health check endpoint
- `src/middleware/` - Security middleware
- `.env.example` - Environment template
- `src/utils/envValidator.ts` - Environment validation

### **URLs Critici**

- Backend: https://student-analyst.onrender.com
- Health Check: https://student-analyst.onrender.com/health
- API Test: https://student-analyst.onrender.com/api/test
- Financial API: https://student-analyst.onrender.com/api/financial/AAPL

### **Environment Variables Critiche**

```bash
# Obbligatorie
NODE_ENV=production
DATABASE_URL=postgresql://...
JWT_SECRET=your-secret-key
ALPHA_VANTAGE_API_KEY=your-api-key
CORS_ORIGIN=https://student-analyst.vercel.app

# Opzionali ma raccomandate
REDIS_URL=redis://...
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
```

---

**‚ö†Ô∏è REGOLA FINALE: SEMPRE VERIFICARE PRIMA DI DEPLOYARE**

**Ogni deploy deve passare attraverso:**

1. ‚úÖ TypeScript compilation
2. ‚úÖ ESLint check
3. ‚úÖ Test suite
4. ‚úÖ Build verification
5. ‚úÖ Health check test
6. ‚úÖ API endpoint test
7. ‚úÖ CORS verification
8. ‚úÖ Security validation

# üö¶ ACCESSIBILIT√Ä - REGOLE OBBLIGATORIE

## Regole per input e form

- Ogni campo input, select, textarea DEVE avere:
  - attributo id univoco
  - attributo name univoco
  - label associato tramite label htmlFor="id" oppure nesting diretto
- Ogni label DEVE essere associato a un campo tramite htmlFor
- Ogni bottone solo icona DEVE avere aria-label descrittivo
- Usa aria-describedby per collegare input a testo di aiuto
- Il placeholder NON sostituisce mai il label

## Checklist pre-commit/pre-deploy

- [ ] Tutti gli input hanno id e name
- [ ] Tutti i label sono associati tramite htmlFor
- [ ] Bottoni icona hanno aria-label
- [ ] Nessun campo senza label
- [ ] Testato con Lighthouse (score > 90)
- [ ] Navigazione da tastiera OK

**Regola finale:** Ogni modifica a form/input DEVE rispettare queste regole prima del merge o deploy.

6: # üñ•Ô∏è RENDER BACKEND DEPLOYMENT - STUDENT ANALYST

> **‚ö†Ô∏è REGOLE CRITICHE DI DEPLOYMENT** | [Render Setup](#render-setup) | [Git Rules](#git-rules)

---

## üö® CRITICAL DEPLOYMENT RULES

### **SICUREZZA ASSOLUTA**

- **NON MAI** committare secrets, API keys, o database URLs
- **SEMPRE** usare environment variables per configurazioni
- **VERIFICARE** che non ci siano hardcoded values
- **CONTROLLARE** ogni file prima del push

### **HEALTH CHECK OBBLIGATORIO**

- **SEMPRE** implementare endpoint `/health`
- **VERIFICARE** che health check risponda correttamente
- **MONITORARE** logs dopo ogni deploy
- **TESTARE** endpoint dopo rollback

---

## üñ•Ô∏è RENDER SETUP - CONFIGURAZIONE OBBLIGATORIA

### **Stack Tecnologico**

- **Runtime**: Node.js 18.x o superiore
- **Framework**: Express.js
- **Database**: PostgreSQL
- **Cache**: Redis (opzionale)
- **URL**: https://student-analyst.onrender.com

### **Procfile - SEMPRE OBBLIGATORIO**

```
web: npm run start
```

### **package.json Scripts - SEMPRE OBBLIGATORI**

```json
{
  "scripts": {
    "start": "node dist/index.js",
    "build": "tsc",
    "dev": "nodemon src/index.ts",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "type-check": "tsc --noEmit",
    "lint": "eslint src --ext .ts,.tsx",
    "lint:fix": "eslint src --ext .ts,.tsx --fix"
  }
}
```

### **Health Check Endpoint - SEMPRE OBBLIGATORIO**

```typescript
// src/routes/health.ts
import { Router } from 'express';

const router = Router();

router.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
  });
});

export default router;
```

### **Environment Variables - SICUREZZA ASSOLUTA**

```bash
# MAI committare questi valori - solo in Render Dashboard
NODE_ENV=production
DATABASE_URL=postgresql://username:password@host:port/database
JWT_SECRET=your-super-secret-key-here
RENDER_EXTERNAL_URL=https://student-analyst.onrender.com
CORS_ORIGIN=https://student-analyst.vercel.app
```

---

## üîß GIT & COMMIT RULES - STANDARDS OBBLIGATORI

### **Conventional Commits - SEMPRE OBBLIGATORIO**

```bash
# Formato: <type>[scope]: <description>
feat(api): add financial data analysis endpoint
fix(ui): resolve chart rendering issue in dashboard
docs(readme): update deployment instructions
refactor(cache): optimize IndexedDB storage strategy
test(e2e): add user authentication flow tests
chore(deps): update Vite to latest version

# Breaking changes
feat!: breaking change in API response format
# oppure
BREAKING CHANGE: API now returns data in new format
```

### **Branch Naming - SEMPRE OBBLIGATORIO**

```bash
feature/user-authentication
fix/api-error-handling
refactor/cache-system
docs/vercel-deployment
test/e2e-coverage
hotfix/critical-security-fix
```

### **Workflow Operativo - SEMPRE OBBLIGATORIO**

```bash
# 1. Crea feature branch da main
git checkout main
git pull origin main
git checkout -b feature/nome-feature

# 2. Sviluppa e committa
git add .
git commit -m "feat(scope): description"

# 3. Push e crea PR
git push origin feature/nome-feature
# Crea Pull Request su GitHub

# 4. Dopo merge, elimina branch
git checkout main
git pull origin main
git branch -d feature/nome-feature
```

### **Pull Request Template - SEMPRE OBBLIGATORIO**

```markdown
## üìã Descrizione

Breve descrizione delle modifiche

## ‚úÖ Checklist

- [ ] Aggiunta nuova funzionalit√†
- [ ] Fix bug esistente
- [ ] Refactoring codice
- [ ] Aggiornamento documentazione

## üß™ Testing

- [ ] Unit tests passano
- [ ] E2E tests passano
- [ ] Testato localmente
- [ ] Health check funziona

## üìã Quality

- [ ] Codice segue coding standards
- [ ] Documentazione aggiornata
- [ ] Commit messages convenzionali
- [ ] Nessun console.log o debug code

## üîó Riferimenti

Fixes #123
```

---

## üöÄ DEPLOYMENT WORKFLOW - REGOLE CRITICHE

### **Pre-Deploy Checklist - SEMPRE VERIFICARE**

- [ ] TypeScript check passa (`tsc --noEmit`)
- [ ] Lint check passa (`npm run lint`)
- [ ] Tests passano (`npm run test`)
- [ ] Build locale funziona (`npm run build`)
- [ ] Environment variables configurate in Render
- [ ] Health check endpoint implementato
- [ ] CORS configurato per frontend Vercel

### **Deploy Process - SEMPRE SEGUIRE**

```bash
# 1. Verifica locale
npm run type-check
npm run lint
npm run test
npm run build

# 2. Commit e push
git add .
git commit -m "feat(api): add new endpoint"
git push origin main

# 3. Monitora deploy su Render Dashboard
# 4. Verifica health check
curl https://student-analyst.onrender.com/health
```

### **Post-Deploy Verification - SEMPRE OBBLIGATORIO**

```bash
# Health check
curl -f https://student-analyst.onrender.com/health

# API test
curl -f https://student-analyst.onrender.com/api/test

# CORS test
curl -H "Origin: https://student-analyst.vercel.app" \
     -H "Access-Control-Request-Method: GET" \
     -H "Access-Control-Request-Headers: Content-Type" \
     -X OPTIONS \
     https://student-analyst.onrender.com/api/financial/AAPL
```

---

## üîí SECURITY RULES - SEMPRE OBBLIGATORIE

### **Authentication & Authorization**

```typescript
// SEMPRE implementare JWT authentication
import jwt from 'jsonwebtoken';

const authenticateToken = (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, process.env.JWT_SECRET!, (err: any, user: any) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid token' });
    }
    req.user = user;
    next();
  });
};
```

### **CORS Configuration - SEMPRE OBBLIGATORIO**

```typescript
import cors from 'cors';

const corsOptions = {
  origin: process.env.CORS_ORIGIN || 'https://student-analyst.vercel.app',
  credentials: true,
  optionsSuccessStatus: 200,
};

app.use(cors(corsOptions));
```

### **Rate Limiting - SEMPRE OBBLIGATORIO**

```typescript
import rateLimit from 'express-rate-limit';

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP',
});

app.use('/api/', limiter);
```

### **Input Validation - SEMPRE OBBLIGATORIO**

```typescript
import { body, validationResult } from 'express-validator';

const validateFinancialData = [
  body('symbol').isString().isLength({ min: 1, max: 10 }),
  body('timeframe').isIn(['1d', '1w', '1m', '3m', '1y']),
  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    next();
  },
];
```

---

## üö® TROUBLESHOOTING - REGOLE CRITICHE

### **Build Errors - SEMPRE VERIFICARE**

```bash
# 1. TypeScript check
tsc --noEmit

# 2. Lint check
npm run lint

# 3. Test check
npm run test

# 4. Build check
npm run build
```

### **Deployment Issues - CHECKLIST OBBLIGATORIA**

- [ ] Environment variables configurate in Render Dashboard
- [ ] Procfile presente e corretto
- [ ] Health check endpoint funzionante
- [ ] Build locale funziona
- [ ] Tests passano
- [ ] TypeScript check passa
- [ ] CORS configurato correttamente

### **Common Fixes - SEMPRE VERIFICARE**

```bash
# Clear cache
rm -rf node_modules package-lock.json
npm install

# Check logs
# Render Dashboard > Logs

# Restart service
# Render Dashboard > Manual Deploy
```

---

## ‚úÖ BEST PRACTICES CHECKLIST

### **Pre-Deploy - SEMPRE VERIFICARE**

- [ ] TypeScript strict mode attivo
- [ ] Tutti gli errori gestiti con try/catch
- [ ] Environment variables configurate
- [ ] Tests passano (>80% coverage)
- [ ] Lint passa senza errori
- [ ] Build locale funziona
- [ ] Health check endpoint attivo

### **Code Quality - SEMPRE VERIFICARE**

- [ ] Nessun `any` in TypeScript
- [ ] Interfacce definite per tutti i data
- [ ] Error handling implementato
- [ ] Input validation attiva
- [ ] Rate limiting configurato
- [ ] CORS configurato correttamente

### **Security - SEMPRE VERIFICARE**

- [ ] Nessun secret hardcoded
- [ ] JWT authentication implementata
- [ ] Input validation implementata
- [ ] Rate limiting attivo
- [ ] HTTPS sempre
- [ ] CORS origin specifico

---

## üéØ QUICK REFERENCE

### **Comandi Critici**

```bash
# Development
npm run dev          # Nodemon dev server
npm run build        # TypeScript build
npm run test         # Run tests
npm run lint         # ESLint check
tsc --noEmit         # TypeScript check

# Deployment
git push origin main # Trigger Render deploy
curl https://student-analyst.onrender.com/health # Health check

# Troubleshooting
npm run type-check   # TypeScript check
npm run test:coverage # Test coverage
# Render Dashboard > Logs # View logs
```

### **File Critici**

- `Procfile` - Render configuration
- `package.json` - Scripts and dependencies
- `src/routes/health.ts` - Health check endpoint
- `.env.example` - Environment template
- `tsconfig.json` - TypeScript config

### **URLs Critici**

- Backend: https://student-analyst.onrender.com
- Health Check: https://student-analyst.onrender.com/health
- API Test: https://student-analyst.onrender.com/api/test

---

**‚ö†Ô∏è REGOLA FINALE: SEMPRE VERIFICARE PRIMA DI DEPLOYARE**

7: # üß™ TESTING STANDARDS - STUDENT ANALYST

> **‚ö†Ô∏è REGOLE CRITICHE DI TESTING** | [Jest Setup](#jest-setup) | [Component Testing](#component-testing) | [E2E Testing](#e2e-testing)

---

## üö® CRITICAL TESTING RULES

### **PRECISIONE ASSOLUTA**

- **NON MAI** fare supposizioni sui nomi di componenti o funzioni
- **SEMPRE** leggere il file target prima di scrivere test
- **VERIFICARE** ogni riferimento a props, state, event handlers
- **TESTARE** ogni test prima di commit

### **COVERAGE OBBLIGATORIA**

- **MINIMO 80%** coverage per tutti i file
- **100%** coverage per componenti critici (auth, financial data)
- **SEMPRE** testare error states e edge cases
- **VERIFICARE** che tutti i user flows siano coperti

---

## üÉè JEST SETUP - CONFIGURAZIONE OBBLIGATORIA

### **jest.config.js - SEMPRE OBBLIGATORIO**

```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  roots: ['<rootDir>/src', '<rootDir>/tests'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/services/(.*)$': '<rootDir>/src/services/$1',
    '^@/utils/(.*)$': '<rootDir>/src/utils/$1',
    '^@/types/(.*)$': '<rootDir>/src/types/$1',
  },
  setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/main.tsx',
    '!src/vite-env.d.ts',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
  testMatch: [
    '<rootDir>/src/**/__tests__/**/*.{ts,tsx}',
    '<rootDir>/src/**/*.{test,spec}.{ts,tsx}',
    '<rootDir>/tests/**/*.{test,spec}.{ts,tsx}',
  ],
  transform: {
    '^.+\\.(ts|tsx)$': 'ts-jest',
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],
  testPathIgnorePatterns: ['/node_modules/', '/dist/'],
  collectCoverage: true,
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov', 'html'],
  verbose: true,
};
```

### **tests/setup.ts - SEMPRE OBBLIGATORIO**

```typescript
import '@testing-library/jest-dom';
import { server } from './mocks/server';

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() {
    return null;
  }
  unobserve() {
    return null;
  }
  disconnect() {
    return null;
  }
};

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor() {}
  observe() {
    return null;
  }
  unobserve() {
    return null;
  }
  disconnect() {
    return null;
  }
};

// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// Setup MSW
beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
```

---

## üß© COMPONENT TESTING - STANDARDS CRITICI

### **Test Naming - SEMPRE OBBLIGATORIO**

```typescript
// ‚úÖ Pattern: describe('ComponentName', () => {})
describe('FinancialChart', () => {
  // ‚úÖ Test cases: it('should do something specific', () => {})
  it('should render chart with financial data', () => {});
  it('should handle empty data gracefully', () => {});
  it('should update chart when data changes', () => {});
  it('should call onDataUpdate when user interacts', () => {});
  it('should display error state when API fails', () => {});
});
```

### **Component Testing - SEMPRE OBBLIGATORIO**

```typescript
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { FinancialChart } from '@/components/FinancialChart';

describe('FinancialChart', () => {
  const mockData: FinancialData[] = [
    {
      symbol: 'AAPL',
      price: 150.25,
      change: 2.5,
      volume: 1000000,
      timestamp: new Date('2024-01-01T10:00:00Z')
    }
  ];

  const defaultProps = {
    data: mockData,
    onDataUpdate: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should render chart with financial data', () => {
    render(<FinancialChart {...defaultProps} />);

    expect(screen.getByText('AAPL')).toBeInTheDocument();
    expect(screen.getByText('$150.25')).toBeInTheDocument();
    expect(screen.getByText('+2.50')).toBeInTheDocument();
  });

  it('should handle empty data gracefully', () => {
    render(<FinancialChart data={[]} onDataUpdate={jest.fn()} />);

    expect(screen.getByText('No financial data available')).toBeInTheDocument();
  });

  it('should call onDataUpdate when user clicks data point', async () => {
    const user = userEvent.setup();
    const onDataUpdate = jest.fn();

    render(<FinancialChart {...defaultProps} onDataUpdate={onDataUpdate} />);

    const dataPoint = screen.getByRole('button', { name: /AAPL/i });
    await user.click(dataPoint);

    expect(onDataUpdate).toHaveBeenCalledWith(mockData);
  });

  it('should display loading state', () => {
    render(<FinancialChart {...defaultProps} isLoading={true} />);

    expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
  });

  it('should display error state', () => {
    const errorMessage = 'Failed to load data';
    render(<FinancialChart {...defaultProps} error={errorMessage} />);

    expect(screen.getByText(errorMessage)).toBeInTheDocument();
  });
});
```

### **API Service Testing - SEMPRE OBBLIGATORIO**

```typescript
import { fetchFinancialData } from '@/services/financialAPI';
import { server } from '@/tests/mocks/server';
import { rest } from 'msw';

describe('Financial API Service', () => {
  it('should fetch financial data successfully', async () => {
    const mockData = [
      {
        symbol: 'AAPL',
        price: 150.25,
        change: 2.5,
        volume: 1000000,
        timestamp: '2024-01-01T10:00:00Z',
      },
    ];

    server.use(
      rest.get('/api/financial/AAPL', (req, res, ctx) => {
        return res(ctx.json(mockData));
      })
    );

    const result = await fetchFinancialData('AAPL');
    expect(result).toEqual(mockData);
  });

  it('should handle API errors gracefully', async () => {
    server.use(
      rest.get('/api/financial/INVALID', (req, res, ctx) => {
        return res(ctx.status(404), ctx.json({ error: 'Symbol not found' }));
      })
    );

    await expect(fetchFinancialData('INVALID')).rejects.toThrow(
      'Symbol not found'
    );
  });

  it('should handle network errors', async () => {
    server.use(
      rest.get('/api/financial/AAPL', (req, res, ctx) => {
        return res.networkError('Failed to connect');
      })
    );

    await expect(fetchFinancialData('AAPL')).rejects.toThrow(
      'Failed to connect'
    );
  });
});
```

---

## üåê E2E TESTING - STANDARDS CRITICI

### **playwright.config.ts - CONFIGURAZIONE OBBLIGATORIA**

```typescript
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests/e2e',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:5173',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
  ],
  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:5173',
    reuseExistingServer: !process.env.CI,
  },
});
```

### **E2E Test - SEMPRE OBBLIGATORIO**

```typescript
// tests/e2e/user-authentication.spec.ts
import { test, expect } from '@playwright/test';

test.describe('User Authentication Flow', () => {
  test('should allow user to login and access dashboard', async ({ page }) => {
    // Navigate to login page
    await page.goto('/login');

    // Fill login form
    await page.fill('[data-testid="email-input"]', 'test@example.com');
    await page.fill('[data-testid="password-input"]', 'password123');

    // Submit form
    await page.click('[data-testid="login-button"]');

    // Wait for redirect to dashboard
    await page.waitForURL('/dashboard');

    // Verify dashboard elements
    await expect(page.locator('[data-testid="dashboard-title"]')).toBeVisible();
    await expect(page.locator('[data-testid="financial-chart"]')).toBeVisible();
  });

  test('should show error for invalid credentials', async ({ page }) => {
    await page.goto('/login');

    await page.fill('[data-testid="email-input"]', 'invalid@example.com');
    await page.fill('[data-testid="password-input"]', 'wrongpassword');
    await page.click('[data-testid="login-button"]');

    await expect(page.locator('[data-testid="error-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="error-message"]')).toContainText(
      'Invalid credentials'
    );
  });

  test('should allow user to search for financial data', async ({ page }) => {
    await page.goto('/dashboard');

    // Search for stock
    await page.fill('[data-testid="search-input"]', 'AAPL');
    await page.click('[data-testid="search-button"]');

    // Wait for results
    await page.waitForSelector('[data-testid="stock-result"]');

    // Verify results
    await expect(page.locator('[data-testid="stock-result"]')).toContainText(
      'AAPL'
    );
  });
});
```

---

## üõ†Ô∏è TEST UTILITIES - SEMPRE OBBLIGATORI

### **MSW Setup - SEMPRE OBBLIGATORIO**

```typescript
// tests/mocks/handlers.ts
import { rest } from 'msw';

export const handlers = [
  rest.get('/api/financial/:symbol', (req, res, ctx) => {
    const { symbol } = req.params;

    if (symbol === 'AAPL') {
      return res(
        ctx.json([
          {
            symbol: 'AAPL',
            price: 150.25,
            change: 2.5,
            volume: 1000000,
            timestamp: '2024-01-01T10:00:00Z',
          },
        ])
      );
    }

    return res(ctx.status(404), ctx.json({ error: 'Symbol not found' }));
  }),

  rest.post('/api/auth/login', (req, res, ctx) => {
    const { email, password } = req.body as any;

    if (email === 'test@example.com' && password === 'password123') {
      return res(
        ctx.json({
          token: 'mock-jwt-token',
          user: { id: 1, email: 'test@example.com' },
        })
      );
    }

    return res(ctx.status(401), ctx.json({ error: 'Invalid credentials' }));
  }),
];
```

### **Test Utilities - SEMPRE OBBLIGATORI**

```typescript
// tests/utils/test-utils.tsx
import React from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';

const AllTheProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <BrowserRouter>
      {children}
    </BrowserRouter>
  );
};

const customRender = (
  ui: React.ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => render(ui, { wrapper: AllTheProviders, ...options });

export * from '@testing-library/react';
export { customRender as render };
```

---

## ‚úÖ TESTING CHECKLIST - SEMPRE VERIFICARE

### **Pre-Commit - SEMPRE OBBLIGATORIO**

- [ ] Tutti i test passano
- [ ] Coverage >80%
- [ ] E2E tests passano
- [ ] Performance tests passano
- [ ] Security tests passano

### **Test Quality - SEMPRE VERIFICARE**

- [ ] Test names descrittivi
- [ ] Test isolation (beforeEach/afterEach)
- [ ] Mock external dependencies
- [ ] Test error states
- [ ] Test loading states
- [ ] Test edge cases

### **Coverage - SEMPRE VERIFICARE**

- [ ] Components: >90%
- [ ] Services: >85%
- [ ] Utils: >90%
- [ ] Global: >80%

---

## üö® TROUBLESHOOTING - REGOLE CRITICHE

### **Test Failures - SEMPRE VERIFICARE**

```bash
# Run tests with verbose output
npm test -- --verbose

# Run specific test file
npm test -- FinancialChart.test.tsx

# Run tests in watch mode
npm test -- --watch

# Debug with Playwright
npx playwright test --debug

# Generate coverage report
npm run test:coverage
```

### **Common Issues - SEMPRE VERIFICARE**

```typescript
// Fix for async component testing
test('should handle async data loading', async () => {
  render(<AsyncComponent />);

  // Wait for loading state
  await screen.findByText('Loading...');

  // Wait for data to load
  await screen.findByText('Data loaded');

  expect(screen.getByText('Success')).toBeInTheDocument();
});

// Fix for component with context
test('should render with context', () => {
  const mockContextValue = { user: { name: 'Test User' } };

  render(
    <UserContext.Provider value={mockContextValue}>
      <UserProfile />
    </UserContext.Provider>
  );

  expect(screen.getByText('Test User')).toBeInTheDocument();
});
```

---

## üéØ QUICK REFERENCE

### **Comandi Critici**

```bash
# Unit Tests
npm test                    # Run all tests
npm test -- --watch        # Watch mode
npm test -- --coverage     # With coverage
npm test -- --verbose      # Verbose output

# E2E Tests
npx playwright test        # Run E2E tests
npx playwright test --ui   # UI mode
npx playwright show-report # Show report

# Coverage
npm run test:coverage      # Generate coverage
open coverage/lcov-report/index.html # View coverage
```

### **File Critici**

- `jest.config.js` - Jest configuration
- `tests/setup.ts` - Test setup
- `tests/mocks/handlers.ts` - MSW handlers
- `tests/utils/test-utils.tsx` - Test utilities
- `playwright.config.ts` - Playwright config

---

**‚ö†Ô∏è REGOLA FINALE: SEMPRE TESTARE PRIMA DI COMMITTARE**

8: # üéØ CURSOR AI RULES - STUDENT ANALYST PROJECT

> **‚ö†Ô∏è REGOLE CRITICHE DI SICUREZZA E PRECISIONE** | [Quick Reference](#quick-reference) | [Critical Rules](#critical-rules)

---

## üö® CRITICAL RULES - SEMPRE SEGUIRE

### **PRECISIONE ASSOLUTA**

- **NON MAI** fare supposizioni su nomi di variabili, funzioni o file
- **SEMPRE** leggere il file target prima di modificare
- **VERIFICARE** ogni riferimento a variabili, import, exports
- **TESTARE** ogni modifica con `tsc --noEmit` prima di commit

### **SICUREZZA TOTALE**

- **NON MAI** committare secrets, API keys, o dati sensibili
- **SEMPRE** usare environment variables per configurazioni
- **VERIFICARE** che non ci siano hardcoded values
- **CONTROLLARE** ogni file prima del push

### **QUALIT√Ä OBBLIGATORIA**

- **NON MAI** usare `any` in TypeScript
- **SEMPRE** definire interfacce per props e data
- **VERIFICARE** che tutti gli errori siano gestiti
- **TESTARE** ogni funzionalit√† prima del deploy

---

## üéØ PROJECT FOCUS

**Student Analyst**: Piattaforma di analisi finanziaria per studenti

- **Frontend**: Vercel + Vite + React + TypeScript
- **Backend**: Render + Node.js + Express
- **Database**: PostgreSQL
- **Git**: GitHub + Conventional Commits

---

## üöÄ VERCEL DEPLOYMENT - REGOLE CRITICHE

### **vercel.json OBBLIGATORIO per SPA**

```json
{
  "$schema": "https://openapi.vercel.sh/vercel.json",
  "rewrites": [{ "source": "/(.*)", "destination": "/index.html" }],
  "headers": [
    {
      "source": "/(.*).(js|css|png|jpg|webp|svg|ico|woff2)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ]
    }
  ],
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "framework": "vite"
}
```

### **Environment Variables - SICUREZZA ASSOLUTA**

- **NON MAI** committare `.env` files
- **SEMPRE** usare Vercel Dashboard per secrets
- **VERIFICARE** che non ci siano hardcoded API keys

### **Build Process - VERIFICA OBBLIGATORIA**

```bash
# Prima di ogni deploy
npm run type-check
npm run lint
npm run test
npm run build
```

---

## ‚öõÔ∏è TYPESCRIPT & REACT - STANDARDS CRITICI

### **tsconfig.json - CONFIGURAZIONE OBBLIGATORIA**

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noUncheckedIndexedAccess": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/services/*": ["./src/services/*"],
      "@/types/*": ["./src/types/*"],
      "@/utils/*": ["./src/utils/*"]
    }
  },
  "include": ["src", "tests"],
  "exclude": ["node_modules", "dist"]
}
```

### **Type Safety - REGOLE ASSOLUTE**

```typescript
// ‚úÖ SEMPRE - Type Safety
interface FinancialData {
  symbol: string;
  price: number;
  change: number;
  volume: number;
  timestamp: Date;
}

interface ApiResponse<T> {
  data: T;
  status: 'success' | 'error';
  message?: string;
  timestamp: string;
}

// ‚ùå MAI - Evita any
const user: any = getUserData(); // SBAGLIATO
const response = await fetch(url); // SBAGLIATO

// ‚úÖ CORRETTO
const user: User = getUserData();
const response: Response = await fetch(url);
```

### **React Components - STANDARDS OBBLIGATORI**

```typescript
import React, { useState, useEffect, useCallback, useMemo } from 'react';

interface FinancialChartProps {
  data: FinancialData[];
  onDataUpdate?: (data: FinancialData[]) => void;
  chartType?: 'line' | 'bar' | 'candlestick' | 'area';
  timeframe?: '1d' | '1w' | '1m' | '3m' | '1y';
  className?: string;
}

export const FinancialChart: React.FC<FinancialChartProps> = ({
  data,
  onDataUpdate,
  chartType = 'line',
  timeframe = '1m',
  className
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ‚úÖ useCallback per event handlers
  const handleDataUpdate = useCallback((newData: FinancialData[]) => {
    onDataUpdate?.(newData);
  }, [onDataUpdate]);

  // ‚úÖ useMemo per calcoli costosi
  const processedData = useMemo(() => {
    return data.map(item => ({
      ...item,
      formattedPrice: new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(item.price)
    }));
  }, [data]);

  // ‚úÖ Error handling obbligatorio
  useEffect(() => {
    if (data.length === 0) {
      setError('No financial data available');
    } else {
      setError(null);
    }
  }, [data]);

  if (error) {
    return <ErrorDisplay message={error} />;
  }

  return (
    <div className={className}>
      {isLoading ? (
        <LoadingSpinner />
      ) : (
        <ChartComponent
          data={processedData}
          chartType={chartType}
          onUpdate={handleDataUpdate}
        />
      )}
    </div>
  );
};
```

### **Error Handling - SEMPRE OBBLIGATORIO**

```typescript
// ‚úÖ SEMPRE gestisci errori
const fetchFinancialData = async (ticker: string): Promise<FinancialData[]> => {
  try {
    const response = await fetch(`/api/financial/${ticker}`, {
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${getAuthToken()}`,
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching financial data:', error);

    if (error instanceof Error) {
      throw new Error(
        `Failed to fetch financial data for ${ticker}: ${error.message}`
      );
    }

    throw new Error('Failed to fetch financial data');
  }
};
```

---

## üß™ TESTING - STANDARDS CRITICI

### **Jest Configuration - OBBLIGATORIA**

```javascript
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  roots: ['<rootDir>/src', '<rootDir>/tests'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/services/(.*)$': '<rootDir>/src/services/$1',
  },
  setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],
  collectCoverageFrom: ['src/**/*.{ts,tsx}', '!src/**/*.d.ts', '!src/main.tsx'],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
  testMatch: [
    '<rootDir>/src/**/__tests__/**/*.{ts,tsx}',
    '<rootDir>/src/**/*.{test,spec}.{ts,tsx}',
  ],
  transform: {
    '^.+\\.(ts|tsx)$': 'ts-jest',
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],
  testPathIgnorePatterns: ['/node_modules/', '/dist/'],
  collectCoverage: true,
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov', 'html'],
  verbose: true,
};
```

### **Component Testing - SEMPRE OBBLIGATORIO**

```typescript
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { FinancialChart } from '@/components/FinancialChart';

describe('FinancialChart', () => {
  const mockData: FinancialData[] = [
    {
      symbol: 'AAPL',
      price: 150.25,
      change: 2.5,
      volume: 1000000,
      timestamp: new Date('2024-01-01T10:00:00Z')
    }
  ];

  const defaultProps = {
    data: mockData,
    onDataUpdate: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should render chart with financial data', () => {
    render(<FinancialChart {...defaultProps} />);
    expect(screen.getByText('AAPL')).toBeInTheDocument();
    expect(screen.getByText('$150.25')).toBeInTheDocument();
  });

  it('should handle empty data gracefully', () => {
    render(<FinancialChart data={[]} onDataUpdate={jest.fn()} />);
    expect(screen.getByText('No financial data available')).toBeInTheDocument();
  });
});
```

---

## üñ•Ô∏è RENDER BACKEND - REGOLE CRITICHE

### **Procfile - OBBLIGATORIO**

```
web: npm run start
```

### **package.json Scripts - OBBLIGATORI**

```json
{
  "scripts": {
    "start": "node dist/index.js",
    "build": "tsc",
    "dev": "nodemon src/index.ts",
    "test": "jest",
    "test:coverage": "jest --coverage"
  }
}
```

### **Health Check Endpoint - OBBLIGATORIO**

```typescript
// src/routes/health.ts
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0',
  });
});
```

### **Environment Variables - SICUREZZA ASSOLUTA**

```bash
# MAI committare questi valori
NODE_ENV=production
DATABASE_URL=postgresql://...
JWT_SECRET=your-super-secret-key
RENDER_EXTERNAL_URL=https://student-analyst.onrender.com
```

---

## üîß GIT & COMMIT - STANDARDS OBBLIGATORI

### **Conventional Commits - SEMPRE OBBLIGATORIO**

```bash
# Formato: <type>[scope]: <description>
feat(api): add financial data analysis endpoint
fix(ui): resolve chart rendering issue in dashboard
docs(readme): update deployment instructions
refactor(cache): optimize IndexedDB storage strategy
test(e2e): add user authentication flow tests
chore(deps): update Vite to latest version

# Breaking changes
feat!: breaking change in API response format
# oppure
BREAKING CHANGE: API now returns data in new format
```

### **Branch Naming - SEMPRE OBBLIGATORIO**

```bash
feature/user-authentication
fix/api-error-handling
refactor/cache-system
docs/vercel-deployment
test/e2e-coverage
```

### **Workflow - SEMPRE OBBLIGATORIO**

```bash
# 1. Crea feature branch da main
git checkout main
git pull origin main
git checkout -b feature/nome-feature

# 2. Sviluppa e committa
git add .
git commit -m "feat(scope): description"

# 3. Push e crea PR
git push origin feature/nome-feature
# Crea Pull Request su GitHub

# 4. Dopo merge, elimina branch
git checkout main
git pull origin main
git branch -d feature/nome-feature
```

---

## üö® TROUBLESHOOTING - REGOLE CRITICHE

### **Build Errors - VERIFICA OBBLIGATORIA**

```bash
# 1. TypeScript check
tsc --noEmit

# 2. Lint check
npm run lint

# 3. Test check
npm run test

# 4. Build check
npm run build
```

### **Deployment Issues - CHECKLIST OBBLIGATORIA**

- [ ] Environment variables configurate in Vercel/Render
- [ ] vercel.json presente e corretto
- [ ] Procfile presente per Render
- [ ] Health check endpoint funzionante
- [ ] Build locale funziona
- [ ] Tests passano
- [ ] TypeScript check passa

### **Common Fixes - SEMPRE VERIFICARE**

```bash
# Clear cache
rm -rf node_modules package-lock.json
npm install

# Clear Vercel cache
vercel --force

# Check logs
vercel logs
# Render: Dashboard > Logs
```

---

## ‚úÖ BEST PRACTICES CHECKLIST

### **Pre-Deploy - SEMPRE VERIFICARE**

- [ ] TypeScript strict mode attivo
- [ ] Tutti gli errori gestiti con try/catch
- [ ] Environment variables configurate
- [ ] Tests passano (>80% coverage)
- [ ] Lint passa senza errori
- [ ] Build locale funziona
- [ ] Health check endpoint attivo

### **Code Quality - SEMPRE VERIFICARE**

- [ ] Nessun `any` in TypeScript
- [ ] Interfacce definite per tutti i props
- [ ] Error boundaries implementate
- [ ] Loading states gestiti
- [ ] Accessibility (aria-labels, etc.)
- [ ] Responsive design testato

### **Security - SEMPRE VERIFICARE**

- [ ] Nessun secret hardcoded
- [ ] CORS configurato correttamente
- [ ] Input validation implementata
- [ ] Rate limiting attivo
- [ ] HTTPS sempre
- [ ] JWT tokens sicuri

---

## üéØ QUICK REFERENCE

### **Comandi Critici**

```bash
# Development
npm run dev          # Vite dev server
npm run build        # Build production
npm run test         # Run tests
npm run lint         # ESLint check
tsc --noEmit         # TypeScript check

# Deployment
vercel --prod        # Deploy to Vercel
git push origin main # Trigger Render deploy

# Troubleshooting
npm run type-check   # TypeScript check
npm run test:coverage # Test coverage
vercel logs          # Vercel logs
```

### **File Critici**

- `vercel.json` - Configurazione Vercel
- `tsconfig.json` - TypeScript config
- `jest.config.js` - Jest config
- `Procfile` - Render config
- `.env.example` - Environment template

### **URLs Critici**

- Frontend: https://student-analyst.vercel.app
- Backend: https://student-analyst.onrender.com
- Health Check: https://student-analyst.onrender.com/health

---

**‚ö†Ô∏è REGOLA FINALE: SEMPRE VERIFICARE PRIMA DI COMMITTARE**

---
