<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="172" failures="16" errors="0" time="66.763">
  <testsuite name="Cache System Tests" errors="0" failures="13" skipped="0" timestamp="2025-06-12T14:34:38" time="63.437" tests="19">
    <testcase classname="Cache System Tests MemoryCacheL1 should initialize correctly" name="Cache System Tests MemoryCacheL1 should initialize correctly" time="0.003">
    </testcase>
    <testcase classname="Cache System Tests MemoryCacheL1 should set and get values" name="Cache System Tests MemoryCacheL1 should set and get values" time="0.002">
    </testcase>
    <testcase classname="Cache System Tests MemoryCacheL1 should handle expired values" name="Cache System Tests MemoryCacheL1 should handle expired values" time="0.215">
    </testcase>
    <testcase classname="Cache System Tests MemoryCacheL1 should track statistics correctly" name="Cache System Tests MemoryCacheL1 should track statistics correctly" time="0.001">
    </testcase>
    <testcase classname="Cache System Tests MemoryCacheL1 should evict entries when memory limit is reached" name="Cache System Tests MemoryCacheL1 should evict entries when memory limit is reached" time="0.564">
      <failure>Error: expect(received).toBeLessThanOrEqual(expected)

Expected: &lt;= 10
Received:    20
    at D:\student-analyst\tests\unit\cache.test.ts:66:36
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\cache.test.ts:9:58)</failure>
    </testcase>
    <testcase classname="Cache System Tests LocalStorageCacheL2 should initialize correctly" name="Cache System Tests LocalStorageCacheL2 should initialize correctly" time="0.001">
    </testcase>
    <testcase classname="Cache System Tests LocalStorageCacheL2 should set and get values" name="Cache System Tests LocalStorageCacheL2 should set and get values" time="0.002">
      <failure>Error: expect(received).toEqual(expected) // deep equality

Expected: {&quot;data&quot;: &quot;test-value&quot;}
Received: null
    at D:\student-analyst\tests\unit\cache.test.ts:89:22
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\cache.test.ts:9:58)</failure>
    </testcase>
    <testcase classname="Cache System Tests LocalStorageCacheL2 should handle expired values" name="Cache System Tests LocalStorageCacheL2 should handle expired values" time="0.214">
    </testcase>
    <testcase classname="Cache System Tests LocalStorageCacheL2 should track statistics correctly" name="Cache System Tests LocalStorageCacheL2 should track statistics correctly" time="0.001">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: 0
    at D:\student-analyst\tests\unit\cache.test.ts:112:26
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\cache.test.ts:9:58)
    at runNextTicks (node:internal/process/task_queues:65:5)
    at processTimers (node:internal/timers:520:9)</failure>
    </testcase>
    <testcase classname="Cache System Tests LocalStorageCacheL2 should evict entries when storage limit is reached" name="Cache System Tests LocalStorageCacheL2 should evict entries when storage limit is reached" time="0.362">
      <failure>Error: expect(received).toBeLessThanOrEqual(expected)

Expected: &lt;= 5
Received:    10
    at D:\student-analyst\tests\unit\cache.test.ts:125:36
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\cache.test.ts:9:58)
    at runNextTicks (node:internal/process/task_queues:65:5)
    at processTimers (node:internal/timers:520:9)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should initialize correctly" name="Cache System Tests IndexedDBCacheL3 should initialize correctly" time="0.083">
      <failure>ReferenceError: IDBKeyRange is not defined
    at IDBKeyRange (D:\student-analyst\src\services\IndexedDBCacheL3.ts:267:40)
    at new Promise (&lt;anonymous&gt;)
    at IndexedDBCacheL3.&lt;anonymous&gt; (D:\student-analyst\src\services\IndexedDBCacheL3.ts:259:12)
    at Generator.next (&lt;anonymous&gt;)
    at D:\student-analyst\src\services\IndexedDBCacheL3.ts:8897:40
    at new Promise (&lt;anonymous&gt;)
    at Object.&lt;anonymous&gt;.__awaiter (D:\student-analyst\src\services\IndexedDBCacheL3.ts:8846:10)
    at IndexedDBCacheL3.cleanup (D:\student-analyst\src\services\IndexedDBCacheL3.ts:9512:12)
    at IndexedDBCacheL3.cleanup (D:\student-analyst\src\services\IndexedDBCacheL3.ts:244:18)
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\src\services\IndexedDBCacheL3.ts:8860:24)
    at runNextTicks (node:internal/process/task_queues:65:5)
    at listOnTimeout (node:internal/timers:549:9)
    at processTimers (node:internal/timers:523:7)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should set and get values" name="Cache System Tests IndexedDBCacheL3 should set and get values" time="0.005">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;contains&apos;)
    at MockIDBRequest.contains [as onupgradeneeded] (D:\student-analyst\src\services\IndexedDBCacheL3.ts:136:34)
    at D:\student-analyst\tests\utils\setup.ts:50:58
    at Timeout.task [as _onTimeout] (D:\student-analyst\node_modules\jsdom\lib\jsdom\browser\Window.js:579:19)
    at listOnTimeout (node:internal/timers:588:17)
    at processTimers (node:internal/timers:523:7)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should handle expired values" name="Cache System Tests IndexedDBCacheL3 should handle expired values" time="10.007">
      <failure>Error: thrown: &quot;Exceeded timeout of 10000 ms for a test.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at D:\student-analyst\tests\unit\cache.test.ts:151:5
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at D:\student-analyst\tests\unit\cache.test.ts:129:3
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at Object.&lt;anonymous&gt; (D:\student-analyst\tests\unit\cache.test.ts:10:1)
    at Runtime._execModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:882:12)
    at jestAdapter (D:\student-analyst\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:77:13)
    at runTestInternal (D:\student-analyst\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (D:\student-analyst\node_modules\jest-runner\build\runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should track statistics correctly" name="Cache System Tests IndexedDBCacheL3 should track statistics correctly" time="10.014">
      <failure>Error: thrown: &quot;Exceeded timeout of 10000 ms for a hook.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at D:\student-analyst\tests\unit\cache.test.ts:130:5
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at D:\student-analyst\tests\unit\cache.test.ts:129:3
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at Object.&lt;anonymous&gt; (D:\student-analyst\tests\unit\cache.test.ts:10:1)
    at Runtime._execModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:882:12)
    at jestAdapter (D:\student-analyst\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:77:13)
    at runTestInternal (D:\student-analyst\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (D:\student-analyst\node_modules\jest-runner\build\runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should evict entries when storage limit is reached" name="Cache System Tests IndexedDBCacheL3 should evict entries when storage limit is reached" time="10.007">
      <failure>Error: thrown: &quot;Exceeded timeout of 10000 ms for a hook.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at D:\student-analyst\tests\unit\cache.test.ts:130:5
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at D:\student-analyst\tests\unit\cache.test.ts:129:3
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at Object.&lt;anonymous&gt; (D:\student-analyst\tests\unit\cache.test.ts:10:1)
    at Runtime._execModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:882:12)
    at jestAdapter (D:\student-analyst\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:77:13)
    at runTestInternal (D:\student-analyst\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (D:\student-analyst\node_modules\jest-runner\build\runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should handle concurrent operations" name="Cache System Tests IndexedDBCacheL3 should handle concurrent operations" time="10.01">
      <failure>Error: thrown: &quot;Exceeded timeout of 10000 ms for a hook.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at D:\student-analyst\tests\unit\cache.test.ts:130:5
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at D:\student-analyst\tests\unit\cache.test.ts:129:3
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at Object.&lt;anonymous&gt; (D:\student-analyst\tests\unit\cache.test.ts:10:1)
    at Runtime._execModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:882:12)
    at jestAdapter (D:\student-analyst\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:77:13)
    at runTestInternal (D:\student-analyst\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (D:\student-analyst\node_modules\jest-runner\build\runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="Cache System Tests IndexedDBCacheL3 should handle database errors gracefully" name="Cache System Tests IndexedDBCacheL3 should handle database errors gracefully" time="10.007">
      <failure>Error: thrown: &quot;Exceeded timeout of 10000 ms for a hook.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at D:\student-analyst\tests\unit\cache.test.ts:130:5
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at D:\student-analyst\tests\unit\cache.test.ts:129:3
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at Object.&lt;anonymous&gt; (D:\student-analyst\tests\unit\cache.test.ts:10:1)
    at Runtime._execModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:882:12)
    at jestAdapter (D:\student-analyst\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:77:13)
    at runTestInternal (D:\student-analyst\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (D:\student-analyst\node_modules\jest-runner\build\runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="Cache System Tests Cache Integration should handle data flow between caches" name="Cache System Tests Cache Integration should handle data flow between caches" time="0.001">
      <failure>Error: expect(received).toEqual(expected) // deep equality

Expected: {&quot;data&quot;: &quot;test-value&quot;}
Received: null
    at D:\student-analyst\tests\unit\cache.test.ts:231:24
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\cache.test.ts:9:58)</failure>
    </testcase>
    <testcase classname="Cache System Tests Cache Integration should maintain consistency across caches" name="Cache System Tests Cache Integration should maintain consistency across caches" time="10.01">
      <failure>Error: thrown: &quot;Exceeded timeout of 10000 ms for a test.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at D:\student-analyst\tests\unit\cache.test.ts:239:5
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at D:\student-analyst\tests\unit\cache.test.ts:218:3
    at _dispatchDescribe (D:\student-analyst\node_modules\jest-circus\build\index.js:91:26)
    at describe (D:\student-analyst\node_modules\jest-circus\build\index.js:55:5)
    at Object.&lt;anonymous&gt; (D:\student-analyst\tests\unit\cache.test.ts:10:1)
    at Runtime._execModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (D:\student-analyst\node_modules\jest-runtime\build\index.js:882:12)
    at jestAdapter (D:\student-analyst\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:77:13)
    at runTestInternal (D:\student-analyst\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (D:\student-analyst\node_modules\jest-runner\build\runTest.js:444:34)</failure>
    </testcase>
  </testsuite>
  <testsuite name="AlgorithmOptimizationEngine" errors="0" failures="3" skipped="0" timestamp="2025-06-12T14:35:41" time="0.088" tests="16">
    <testcase classname="AlgorithmOptimizationEngine Construction and Initial State should create engine with empty caches and zero metrics" name="AlgorithmOptimizationEngine Construction and Initial State should create engine with empty caches and zero metrics" time="0.002">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Construction and Initial State should provide immutable metrics object" name="AlgorithmOptimizationEngine Construction and Initial State should provide immutable metrics object" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Covariance Matrix Calculation should calculate covariance matrix correctly" name="AlgorithmOptimizationEngine Covariance Matrix Calculation should calculate covariance matrix correctly" time="0.001">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Covariance Matrix Calculation should use cache for repeated calculations" name="AlgorithmOptimizationEngine Covariance Matrix Calculation should use cache for repeated calculations" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Covariance Matrix Calculation should handle empty returns array" name="AlgorithmOptimizationEngine Covariance Matrix Calculation should handle empty returns array" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Covariance Matrix Calculation should record computation time correctly" name="AlgorithmOptimizationEngine Covariance Matrix Calculation should record computation time correctly" time="0">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: Infinity
    at D:\student-analyst\tests\unit\algorithm-optimization-engine.test.ts:96:42
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\algorithm-optimization-engine.test.ts:5:58)</failure>
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Memoization should memoize function results" name="AlgorithmOptimizationEngine Memoization should memoize function results" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Memoization should call function again with different arguments" name="AlgorithmOptimizationEngine Memoization should call function again with different arguments" time="0.001">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Memoization should handle functions with no arguments" name="AlgorithmOptimizationEngine Memoization should handle functions with no arguments" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Memoization should update cache hit rate with memoization" name="AlgorithmOptimizationEngine Memoization should update cache hit rate with memoization" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Cache Management should clear all caches" name="AlgorithmOptimizationEngine Cache Management should clear all caches" time="0.001">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Cache Management should handle cache TTL expiration" name="AlgorithmOptimizationEngine Cache Management should handle cache TTL expiration" time="0">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 2
Received: 0
    at D:\student-analyst\tests\unit\algorithm-optimization-engine.test.ts:188:39
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\algorithm-optimization-engine.test.ts:5:58)</failure>
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Edge Cases should handle negative returns" name="AlgorithmOptimizationEngine Edge Cases should handle negative returns" time="0.001">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Edge Cases should handle single return series" name="AlgorithmOptimizationEngine Edge Cases should handle single return series" time="0">
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Edge Cases should handle zero variance case" name="AlgorithmOptimizationEngine Edge Cases should handle zero variance case" time="0.001">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 0
Received: 2.8888949165808538e-34
    at D:\student-analyst\tests\unit\algorithm-optimization-engine.test.ts:239:28
    at Generator.next (&lt;anonymous&gt;)
    at fulfilled (D:\student-analyst\tests\unit\algorithm-optimization-engine.test.ts:5:58)</failure>
    </testcase>
    <testcase classname="AlgorithmOptimizationEngine Edge Cases should handle different length return series" name="AlgorithmOptimizationEngine Edge Cases should handle different length return series" time="0">
    </testcase>
  </testsuite>
  <testsuite name="StorageMonitoringService" errors="0" failures="0" skipped="2" timestamp="2025-06-12T14:35:42" time="0.167" tests="110">
    <testcase classname="StorageMonitoringService Constructor and Basic Methods should create instance with default config" name="StorageMonitoringService Constructor and Basic Methods should create instance with default config" time="0.002">
    </testcase>
    <testcase classname="StorageMonitoringService Constructor and Basic Methods should not be initialized initially" name="StorageMonitoringService Constructor and Basic Methods should not be initialized initially" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Constructor and Basic Methods should not be monitoring initially" name="StorageMonitoringService Constructor and Basic Methods should not be monitoring initially" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Constructor and Basic Methods should get storage health even without initialization" name="StorageMonitoringService Constructor and Basic Methods should get storage health even without initialization" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Management should update configuration" name="StorageMonitoringService Configuration Management should update configuration" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Management should maintain other config values when updating" name="StorageMonitoringService Configuration Management should maintain other config values when updating" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Monitoring Operations (Sync) should handle start monitoring when not initialized" name="StorageMonitoringService Monitoring Operations (Sync) should handle start monitoring when not initialized" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Monitoring Operations (Sync) should handle stop monitoring when not active" name="StorageMonitoringService Monitoring Operations (Sync) should handle stop monitoring when not active" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Monitoring Operations (Sync) should handle multiple start monitoring calls" name="StorageMonitoringService Monitoring Operations (Sync) should handle multiple start monitoring calls" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Monitoring Operations (Sync) should handle multiple stop monitoring calls" name="StorageMonitoringService Monitoring Operations (Sync) should handle multiple stop monitoring calls" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Initialization Tests (Sync Only) should have isServiceInitialized return false initially" name="StorageMonitoringService Initialization Tests (Sync Only) should have isServiceInitialized return false initially" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Initialization Tests (Sync Only) should not crash when calling monitoring without initialization" name="StorageMonitoringService Initialization Tests (Sync Only) should not crash when calling monitoring without initialization" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Health State Tests (Sync Only) should return health state structure" name="StorageMonitoringService Health State Tests (Sync Only) should return health state structure" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Health State Tests (Sync Only) should create deep copy of health state" name="StorageMonitoringService Health State Tests (Sync Only) should create deep copy of health state" time="0.002">
    </testcase>
    <testcase classname="StorageMonitoringService Quota Cache Tests (Sync Only) should handle getStorageQuotas cache structure" name="StorageMonitoringService Quota Cache Tests (Sync Only) should handle getStorageQuotas cache structure" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Comprehensive Configuration Tests should handle all configuration properties" name="StorageMonitoringService Comprehensive Configuration Tests should handle all configuration properties" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Comprehensive Configuration Tests should handle edge case configuration values" name="StorageMonitoringService Comprehensive Configuration Tests should handle edge case configuration values" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Comprehensive Configuration Tests should handle configuration reset scenarios" name="StorageMonitoringService Comprehensive Configuration Tests should handle configuration reset scenarios" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Service Lifecycle Tests should handle complete service lifecycle" name="StorageMonitoringService Service Lifecycle Tests should handle complete service lifecycle" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Service Lifecycle Tests should handle service restart scenarios" name="StorageMonitoringService Service Lifecycle Tests should handle service restart scenarios" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Dependency Injection Tests should handle different dependency configurations" name="StorageMonitoringService Dependency Injection Tests should handle different dependency configurations" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Dependency Injection Tests should handle empty dependency injection" name="StorageMonitoringService Dependency Injection Tests should handle empty dependency injection" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService State Consistency Tests should maintain consistent state across operations" name="StorageMonitoringService State Consistency Tests should maintain consistent state across operations" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService State Consistency Tests should handle rapid state changes" name="StorageMonitoringService State Consistency Tests should handle rapid state changes" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Quota Tests (Sync Only) should handle quota caching logic" name="StorageMonitoringService Storage Quota Tests (Sync Only) should handle quota caching logic" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Quota Tests (Sync Only) should handle quota refresh after timeout" name="StorageMonitoringService Storage Quota Tests (Sync Only) should handle quota refresh after timeout" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Advanced Configuration Tests (Extended) should handle enableAutoCheck configuration changes" name="StorageMonitoringService Advanced Configuration Tests (Extended) should handle enableAutoCheck configuration changes" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Advanced Configuration Tests (Extended) should restart monitoring on interval change" name="StorageMonitoringService Advanced Configuration Tests (Extended) should restart monitoring on interval change" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Error Handling (Sync Only) should handle mock localStorage configuration" name="StorageMonitoringService Storage Health Error Handling (Sync Only) should handle mock localStorage configuration" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Error Handling (Sync Only) should handle mock sessionStorage configuration" name="StorageMonitoringService Storage Health Error Handling (Sync Only) should handle mock sessionStorage configuration" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Error Handling (Sync Only) should handle mock error scenarios" name="StorageMonitoringService Storage Health Error Handling (Sync Only) should handle mock error scenarios" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Disposal should dispose resources properly" name="StorageMonitoringService Disposal should dispose resources properly" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Singleton Pattern should return same instance" name="StorageMonitoringService Singleton Pattern should return same instance" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Health State Management should initialize with unknown health status" name="StorageMonitoringService Health State Management should initialize with unknown health status" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Health State Management should have proper health structure" name="StorageMonitoringService Health State Management should have proper health structure" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Edge Cases should handle partial config updates" name="StorageMonitoringService Configuration Edge Cases should handle partial config updates" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Edge Cases should handle multiple config updates" name="StorageMonitoringService Configuration Edge Cases should handle multiple config updates" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Mock Storage Interaction should have properly configured localStorage mock" name="StorageMonitoringService Mock Storage Interaction should have properly configured localStorage mock" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Mock Storage Interaction should have properly configured sessionStorage mock" name="StorageMonitoringService Mock Storage Interaction should have properly configured sessionStorage mock" time="0.002">
    </testcase>
    <testcase classname="StorageMonitoringService Mock Storage Interaction should have properly configured indexedDB mock" name="StorageMonitoringService Mock Storage Interaction should have properly configured indexedDB mock" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Mock Storage Interaction should have properly configured navigator mock" name="StorageMonitoringService Mock Storage Interaction should have properly configured navigator mock" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Service Robustness should handle multiple dispose calls" name="StorageMonitoringService Service Robustness should handle multiple dispose calls" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Service Robustness should handle config updates after disposal" name="StorageMonitoringService Service Robustness should handle config updates after disposal" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Service Robustness should handle monitoring operations after disposal" name="StorageMonitoringService Service Robustness should handle monitoring operations after disposal" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Complex Configuration Scenarios should handle threshold configurations" name="StorageMonitoringService Complex Configuration Scenarios should handle threshold configurations" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Complex Configuration Scenarios should handle interval changes" name="StorageMonitoringService Complex Configuration Scenarios should handle interval changes" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Async Methods Coverage should handle getStorageQuotas with short timeout" name="StorageMonitoringService Async Methods Coverage should handle getStorageQuotas with short timeout" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Async Methods Coverage should verify async method signatures" name="StorageMonitoringService Async Methods Coverage should verify async method signatures" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Branch Coverage should handle enableAutoCheck true when not monitoring" name="StorageMonitoringService Configuration Branch Coverage should handle enableAutoCheck true when not monitoring" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Branch Coverage should handle enableAutoCheck false when monitoring" name="StorageMonitoringService Configuration Branch Coverage should handle enableAutoCheck false when monitoring" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Branch Coverage should handle checkInterval change when monitoring" name="StorageMonitoringService Configuration Branch Coverage should handle checkInterval change when monitoring" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Configuration Branch Coverage should handle checkInterval change when not monitoring" name="StorageMonitoringService Configuration Branch Coverage should handle checkInterval change when not monitoring" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health State Coverage should handle quota cache expiration logic" name="StorageMonitoringService Storage Health State Coverage should handle quota cache expiration logic" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health State Coverage should handle storage health initialization" name="StorageMonitoringService Storage Health State Coverage should handle storage health initialization" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Coverage should handle navigator without storage API" name="StorageMonitoringService Error Handling Coverage should handle navigator without storage API" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Coverage should handle storage estimate rejection" name="StorageMonitoringService Error Handling Coverage should handle storage estimate rejection" time="0.016">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Coverage should handle localStorage test failures" name="StorageMonitoringService Error Handling Coverage should handle localStorage test failures" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Monitoring Interval Coverage should handle monitoring start and stop cycles" name="StorageMonitoringService Monitoring Interval Coverage should handle monitoring start and stop cycles" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Monitoring Interval Coverage should handle monitoring with timer advancement" name="StorageMonitoringService Monitoring Interval Coverage should handle monitoring with timer advancement" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Check Coverage should handle localStorage read/write test success" name="StorageMonitoringService Storage Health Check Coverage should handle localStorage read/write test success" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Check Coverage should handle localStorage read/write test failure" name="StorageMonitoringService Storage Health Check Coverage should handle localStorage read/write test failure" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Check Coverage should handle sessionStorage read/write test success" name="StorageMonitoringService Storage Health Check Coverage should handle sessionStorage read/write test success" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Check Coverage should handle storage size calculation" name="StorageMonitoringService Storage Health Check Coverage should handle storage size calculation" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Check Coverage should handle storage with null keys" name="StorageMonitoringService Storage Health Check Coverage should handle storage with null keys" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Storage Health Check Coverage should handle storage with null values" name="StorageMonitoringService Storage Health Check Coverage should handle storage with null values" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Edge Cases should handle quota detection errors" name="StorageMonitoringService Error Handling Edge Cases should handle quota detection errors" time="0.004">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Edge Cases should handle localStorage errors with Error objects" name="StorageMonitoringService Error Handling Edge Cases should handle localStorage errors with Error objects" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Edge Cases should handle localStorage errors with non-Error objects" name="StorageMonitoringService Error Handling Edge Cases should handle localStorage errors with non-Error objects" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Edge Cases should handle sessionStorage errors with Error objects" name="StorageMonitoringService Error Handling Edge Cases should handle sessionStorage errors with Error objects" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService Error Handling Edge Cases should handle sessionStorage errors with non-Error objects" name="StorageMonitoringService Error Handling Edge Cases should handle sessionStorage errors with non-Error objects" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService IndexedDB Mock Coverage should handle IndexedDB mock configuration" name="StorageMonitoringService IndexedDB Mock Coverage should handle IndexedDB mock configuration" time="0.002">
    </testcase>
    <testcase classname="StorageMonitoringService IndexedDB Mock Coverage should handle IndexedDB request success scenario" name="StorageMonitoringService IndexedDB Mock Coverage should handle IndexedDB request success scenario" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService IndexedDB Mock Coverage should handle IndexedDB request error scenario" name="StorageMonitoringService IndexedDB Mock Coverage should handle IndexedDB request error scenario" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Fallback Quota Coverage should handle navigator without storage property" name="StorageMonitoringService Fallback Quota Coverage should handle navigator without storage property" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Fallback Quota Coverage should handle navigator with storage but no estimate" name="StorageMonitoringService Fallback Quota Coverage should handle navigator with storage but no estimate" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService Fallback Quota Coverage should handle zero quota from storage API" name="StorageMonitoringService Fallback Quota Coverage should handle zero quota from storage API" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Error Handling in detectStorageQuotas should trigger console.error and set fallback quotas on error" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Error Handling in detectStorageQuotas should trigger console.error and set fallback quotas on error" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested performHealthCheck - Complete Flow should execute complete health check flow with mocked async methods" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested performHealthCheck - Complete Flow should execute complete health check flow with mocked async methods" time="0">
      <skipped/>
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested performHealthCheck - Complete Flow should handle performHealthCheck error and set error state" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested performHealthCheck - Complete Flow should handle performHealthCheck error and set error state" time="0">
      <skipped/>
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should return error when read/write test fails" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should return error when read/write test fails" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should calculate storage size with multiple items" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should calculate storage size with multiple items" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should handle error instanceof Error check - Error object" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should handle error instanceof Error check - Error object" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should handle error instanceof Error check - non-Error object" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkLocalStorageHealth - Every Branch should handle error instanceof Error check - non-Error object" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkSessionStorageHealth - Every Branch should return error when read/write test fails" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkSessionStorageHealth - Every Branch should return error when read/write test fails" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkSessionStorageHealth - Every Branch should handle error instanceof Error check - Error object" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkSessionStorageHealth - Every Branch should handle error instanceof Error check - Error object" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkSessionStorageHealth - Every Branch should handle error instanceof Error check - non-Error object" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkSessionStorageHealth - Every Branch should handle error instanceof Error check - non-Error object" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB request.onerror callback" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB request.onerror callback" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB request.onsuccess with deleteRequest.onsuccess" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB request.onsuccess with deleteRequest.onsuccess" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB deleteRequest.onerror callback" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB deleteRequest.onerror callback" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB timeout scenario" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB timeout scenario" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB try-catch error - Error object" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB try-catch error - Error object" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB try-catch error - non-Error object" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested checkIndexedDBHealth - Complete Coverage should handle IndexedDB try-catch error - non-Error object" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle quota cache with exact timing" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle quota cache with exact timing" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle all storage APIs missing" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle all storage APIs missing" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should test every config combination" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should test every config combination" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle monitoring state changes in all combinations" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle monitoring state changes in all combinations" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle all Blob size calculation scenarios" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Edge Cases for Full Coverage should handle all Blob size calculation scenarios" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Initialization and Service State should handle service initialization states" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Initialization and Service State should handle service initialization states" time="0.004">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Configuration Robustness should handle various configuration scenarios" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested Configuration Robustness should handle various configuration scenarios" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-SPECIFIC LINE COVERAGE should test every branch of storage null checks" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-SPECIFIC LINE COVERAGE should test every branch of storage null checks" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-SPECIFIC LINE COVERAGE should cover every possible quota cache scenario" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-SPECIFIC LINE COVERAGE should cover every possible quota cache scenario" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-SPECIFIC LINE COVERAGE should test ultra-precise line coverage for all missing branches" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-SPECIFIC LINE COVERAGE should test ultra-precise line coverage for all missing branches" time="0.003">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover console.error in detectStorageQuotas catch block" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover console.error in detectStorageQuotas catch block" time="0.004">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover fallback quota assignment lines 258-263" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover fallback quota assignment lines 258-263" time="0.003">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover Blob size calculation with null key/value (lines 376-389)" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover Blob size calculation with null key/value (lines 376-389)" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover sessionStorage Blob size calculation (lines 416-427)" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover sessionStorage Blob size calculation (lines 416-427)" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover determineOverallHealth error status branches (lines 433-480)" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover determineOverallHealth error status branches (lines 433-480)" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover critical and warning threshold logic" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover critical and warning threshold logic" time="0.001">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover IndexedDB timeout and error paths (lines 433-450)" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover IndexedDB timeout and error paths (lines 433-450)" time="0">
    </testcase>
    <testcase classname="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover all remaining edge cases" name="StorageMonitoringService ULTRA-COMPREHENSIVE COVERAGE - Every Line Tested ULTRA-TARGETED LINE COVERAGE - Lines 256-480 should cover all remaining edge cases" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CacheAnalyticsEngine" errors="0" failures="0" skipped="0" timestamp="2025-06-12T14:35:42" time="0.068" tests="23">
    <testcase classname="CacheAnalyticsEngine Initial State should start with empty metrics" name="CacheAnalyticsEngine Initial State should start with empty metrics" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Initial State should provide consistent initial state" name="CacheAnalyticsEngine Initial State should provide consistent initial state" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Hit Tracking should track single cache hit" name="CacheAnalyticsEngine Cache Hit Tracking should track single cache hit" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Hit Tracking should track multiple cache hits" name="CacheAnalyticsEngine Cache Hit Tracking should track multiple cache hits" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Hit Tracking should update lastAccessed timestamps" name="CacheAnalyticsEngine Cache Hit Tracking should update lastAccessed timestamps" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Hit Tracking should handle multiple accesses to same key" name="CacheAnalyticsEngine Cache Hit Tracking should handle multiple accesses to same key" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Miss Tracking should track single cache miss" name="CacheAnalyticsEngine Cache Miss Tracking should track single cache miss" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Miss Tracking should track multiple cache misses" name="CacheAnalyticsEngine Cache Miss Tracking should track multiple cache misses" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Cache Miss Tracking should not update lastAccessed for misses" name="CacheAnalyticsEngine Cache Miss Tracking should not update lastAccessed for misses" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Hit Rate Calculation should calculate correct hit rate with mixed hits and misses" name="CacheAnalyticsEngine Hit Rate Calculation should calculate correct hit rate with mixed hits and misses" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Hit Rate Calculation should handle 100% hit rate" name="CacheAnalyticsEngine Hit Rate Calculation should handle 100% hit rate" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Hit Rate Calculation should handle 0% hit rate" name="CacheAnalyticsEngine Hit Rate Calculation should handle 0% hit rate" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Hit Rate Calculation should handle 50% hit rate" name="CacheAnalyticsEngine Hit Rate Calculation should handle 50% hit rate" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Complex Scenarios should handle realistic cache access pattern" name="CacheAnalyticsEngine Complex Scenarios should handle realistic cache access pattern" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Complex Scenarios should handle high volume access pattern" name="CacheAnalyticsEngine Complex Scenarios should handle high volume access pattern" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Edge Cases should handle empty key strings" name="CacheAnalyticsEngine Edge Cases should handle empty key strings" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Edge Cases should handle very long key strings" name="CacheAnalyticsEngine Edge Cases should handle very long key strings" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Edge Cases should handle special characters in keys" name="CacheAnalyticsEngine Edge Cases should handle special characters in keys" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Reset Functionality should reset all metrics to initial state" name="CacheAnalyticsEngine Reset Functionality should reset all metrics to initial state" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Reset Functionality should allow normal operation after reset" name="CacheAnalyticsEngine Reset Functionality should allow normal operation after reset" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine getMetrics() Immutability should return a fresh copy of lastAccessed each time" name="CacheAnalyticsEngine getMetrics() Immutability should return a fresh copy of lastAccessed each time" time="0.001">
    </testcase>
    <testcase classname="CacheAnalyticsEngine getMetrics() Immutability should not allow external modification of metrics" name="CacheAnalyticsEngine getMetrics() Immutability should not allow external modification of metrics" time="0">
    </testcase>
    <testcase classname="CacheAnalyticsEngine Concurrent Access Simulation should handle rapid successive calls" name="CacheAnalyticsEngine Concurrent Access Simulation should handle rapid successive calls" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Dependency Injection Test" errors="0" failures="0" skipped="0" timestamp="2025-06-12T14:35:42" time="0.046" tests="4">
    <testcase classname="Dependency Injection Test should test that DI is working concept" name="Dependency Injection Test should test that DI is working concept" time="0.001">
    </testcase>
    <testcase classname="Dependency Injection Test should handle empty dependencies" name="Dependency Injection Test should handle empty dependencies" time="0">
    </testcase>
    <testcase classname="Dependency Injection Test should support storage mock injection" name="Dependency Injection Test should support storage mock injection" time="0.001">
    </testcase>
    <testcase classname="Dependency Injection Test should work with optional dependencies" name="Dependency Injection Test should work with optional dependencies" time="0.001">
    </testcase>
  </testsuite>
</testsuites>