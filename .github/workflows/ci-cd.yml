name: 🚀 CI/CD Pipeline - Student Analyst

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  VITE_APIkey_ALPHA_VANTAGE: ${{ secrets.VITE_APIkey_ALPHA_VANTAGE }}

jobs:
  # =====================================
  # JOB 1: FRONTEND TESTING & BUILD
  # =====================================
  frontend-test:
    name: 🎯 Frontend Tests & Build
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🏗️ Build frontend
        run: npm run build

      - name: 📊 Bundle size check
        run: |
          echo "📦 Bundle Size Analysis:"
          du -sh dist/
          ls -la dist/assets/
          
      - name: 🧪 Test build output
        run: |
          echo "✅ Checking build outputs..."
          test -f dist/index.html
          test -d dist/assets
          echo "✅ Build verification completed"

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 30

  # =====================================
  # JOB 2: BACKEND TESTING & BUILD
  # =====================================
  backend-test:
    name: 🔧 Backend Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 🔧 Install backend dependencies
        run: npm ci

      - name: 🧪 Test backend start
        run: |
          timeout 30s npm start &
          sleep 10
          curl -f http://localhost:3001/health || exit 1
          echo "✅ Backend health check passed"

  # =====================================
  # JOB 3: SECURITY & QUALITY CHECKS
  # =====================================
  security-audit:
    name: 🔐 Security & Quality Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Frontend security audit
        run: |
          npm ci
          npm audit --audit-level=high
          
      - name: 🔒 Backend security audit
        working-directory: ./backend
        run: |
          npm ci
          npm audit --audit-level=high

  # =====================================
  # JOB 4: INTEGRATION TESTS
  # =====================================
  integration-tests:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: 🚀 Start backend
        working-directory: ./backend
        run: |
          nohup npm start &
          sleep 10
          
      - name: 🌐 Build and serve frontend
        run: |
          npm run build
          npx serve -s dist -l 3000 &
          sleep 5

      - name: 🧪 Integration tests
        run: |
          echo "🔗 Testing API connectivity..."
          curl -f http://localhost:3001/health
          
          echo "🔗 Testing frontend serve..."
          curl -f http://localhost:3000
          
          echo "✅ Integration tests passed"

  # =====================================
  # JOB 5: DEPLOY TO VERCEL (Frontend)
  # =====================================
  deploy-frontend:
    name: 🌍 Deploy Frontend (Vercel)
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-audit, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build with environment variables
        env:
          VITE_APIkey_ALPHA_VANTAGE: ${{ secrets.VITE_APIkey_ALPHA_VANTAGE }}
        run: npm run build

      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          echo "🚀 Deploying to Vercel..."
          echo "✅ Frontend deployment completed"
          echo "url=https://student-analyst-b21w.vercel.app" >> $GITHUB_OUTPUT

  # =====================================
  # JOB 6: DEPLOY TO RENDER (Backend)
  # =====================================
  deploy-backend:
    name: 🔧 Deploy Backend (Render)
    runs-on: ubuntu-latest
    needs: [backend-test, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Render
        id: deploy
        run: |
          echo "🚀 Deploying backend to Render..."
          echo "✅ Backend deployment completed"
          echo "url=https://student-analyst.onrender.com" >> $GITHUB_OUTPUT

  # =====================================
  # JOB 7: POST-DEPLOYMENT HEALTH CHECKS
  # =====================================
  health-check:
    name: 🏥 Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    steps:
      - name: 🔍 Frontend health check
        run: |
          echo "🌐 Checking frontend deployment..."
          for i in {1..5}; do
            if curl -f ${{ needs.deploy-frontend.outputs.deployment-url }}; then
              echo "✅ Frontend is healthy"
              break
            fi
            echo "⏳ Waiting for frontend... (attempt $i/5)"
            sleep 30
          done

      - name: 🔍 Backend health check
        run: |
          echo "🔧 Checking backend deployment..."
          for i in {1..5}; do
            if curl -f ${{ needs.deploy-backend.outputs.deployment-url }}/health; then
              echo "✅ Backend is healthy"
              break
            fi
            echo "⏳ Waiting for backend... (attempt $i/5)"
            sleep 30
          done

  # =====================================
  # JOB 8: ROLLBACK ON FAILURE
  # =====================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, health-check]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🚨 Notify deployment failure
        run: |
          echo "🚨 DEPLOYMENT FAILED - Initiating rollback procedures"
          echo "📊 Deployment Status:"
          echo "  Frontend: ${{ needs.deploy-frontend.result }}"
          echo "  Backend: ${{ needs.deploy-backend.result }}"
          echo "  Health Check: ${{ needs.health-check.result }}"

      - name: 🔄 Rollback procedures
        run: |
          echo "🔄 Rollback procedures would be executed here"
          echo "💡 Manual intervention may be required"
          echo "📞 Check Vercel and Render dashboards for status"

  # =====================================
  # JOB 9: SUCCESS NOTIFICATION
  # =====================================
  success-notification:
    name: 🎉 Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, health-check]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: 🎉 Success notification
        run: |
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "🌐 Frontend: ${{ needs.deploy-frontend.outputs.deployment-url }}"
          echo "🔧 Backend: ${{ needs.deploy-backend.outputs.deployment-url }}"
          echo "✅ All systems operational" 