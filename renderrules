# 🖥️ RENDER BACKEND DEPLOYMENT - STUDENT ANALYST

> **⚠️ REGOLE CRITICHE DI DEPLOYMENT** | [Render Setup](#render-setup) | [Build Pipeline](#build-pipeline) | [Health Checks](#health-checks) | [Troubleshooting](#troubleshooting)

---

## 🚨 CRITICAL DEPLOYMENT RULES

### **SICUREZZA ASSOLUTA**

- **NON MAI** committare secrets, API keys, o database URLs
- **SEMPRE** usare environment variables per configurazioni
- **VERIFICARE** che non ci siano hardcoded values
- **CONTROLLARE** ogni file prima del push
- **SANITIZZARE** tutti gli input utente
- **VALIDARE** tutti i parametri API

### **HEALTH CHECK OBBLIGATORIO**

- **SEMPRE** implementare endpoint `/health` con test completi
- **VERIFICARE** che health check risponda correttamente
- **MONITORARE** logs dopo ogni deploy
- **TESTARE** endpoint dopo rollback
- **CONTROLLARE** database connectivity
- **VERIFICARE** external API status

---

## 🖥️ RENDER SETUP - CONFIGURAZIONE OBBLIGATORIA

### **Stack Tecnologico**

- **Runtime**: Node.js 18.x o superiore
- **Framework**: Express.js con TypeScript
- **Database**: PostgreSQL
- **Cache**: Redis (opzionale)
- **External APIs**: Alpha Vantage, Yahoo Finance
- **URL**: https://student-analyst.onrender.com
- **Frontend**: https://student-analyst.vercel.app

### **Procfile - SEMPRE OBBLIGATORIO**

```
web: npm run start
```

### **package.json Scripts - SEMPRE OBBLIGATORI**

```json
{
  "scripts": {
    "start": "node dist/index.js",
    "build": "tsc",
    "dev": "nodemon src/index.ts",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "type-check": "tsc --noEmit",
    "lint": "eslint src --ext .ts,.tsx",
    "lint:fix": "eslint src --ext .ts,.tsx --fix",
    "build:check": "npm run type-check && npm run lint && npm run build",
    "predeploy": "npm run build:check && npm run test"
  }
}
```

### **tsconfig.json - CONFIGURAZIONE CRITICA PER RENDER**

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "removeComments": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitOverride": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/routes/*": ["src/routes/*"],
      "@/services/*": ["src/services/*"],
      "@/middleware/*": ["src/middleware/*"],
      "@/utils/*": ["src/utils/*"],
      "@/types/*": ["src/types/*"]
    }
  },
  "include": ["src/**/*", "tests/**/*"],
  "exclude": ["node_modules", "dist", "coverage", "*.test.ts", "*.spec.ts"]
}
```

### **Health Check Endpoint - SEMPRE OBBLIGATORIO**

```typescript
// src/routes/health.ts
import { Router, Request, Response } from 'express';
import { Pool } from 'pg';

const router = Router();

interface HealthStatus {
  status: 'ok' | 'error';
  timestamp: string;
  version: string;
  environment: string;
  uptime: number;
  memory: {
    used: number;
    total: number;
    percentage: number;
  };
  database?: {
    status: 'connected' | 'disconnected' | 'error';
    responseTime?: number;
  };
  externalApis?: {
    alphaVantage?: 'ok' | 'error';
    yahooFinance?: 'ok' | 'error';
  };
  services: {
    [key: string]: 'ok' | 'error';
  };
}

router.get('/health', async (req: Request, res: Response) => {
  const startTime = Date.now();
  const healthStatus: HealthStatus = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    uptime: process.uptime(),
    memory: {
      used: process.memoryUsage().heapUsed,
      total: process.memoryUsage().heapTotal,
      percentage:
        (process.memoryUsage().heapUsed / process.memoryUsage().heapTotal) *
        100,
    },
    services: {},
  };

  try {
    // Database health check
    if (process.env.DATABASE_URL) {
      const pool = new Pool({ connectionString: process.env.DATABASE_URL });
      const dbStartTime = Date.now();

      try {
        await pool.query('SELECT 1');
        healthStatus.database = {
          status: 'connected',
          responseTime: Date.now() - dbStartTime,
        };
      } catch (error) {
        healthStatus.database = { status: 'error' };
        healthStatus.status = 'error';
      } finally {
        await pool.end();
      }
    }

    // External APIs health check
    healthStatus.externalApis = {};

    // Alpha Vantage API check
    if (process.env.ALPHA_VANTAGE_API_KEY) {
      try {
        const response = await fetch(
          `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=AAPL&interval=1min&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`
        );
        healthStatus.externalApis.alphaVantage = response.ok ? 'ok' : 'error';
      } catch (error) {
        healthStatus.externalApis.alphaVantage = 'error';
      }
    }

    // Service-specific checks
    healthStatus.services = {
      express: 'ok',
      cors: 'ok',
      rateLimit: 'ok',
      sanitization: 'ok',
    };

    const responseTime = Date.now() - startTime;

    res.status(healthStatus.status === 'ok' ? 200 : 503).json({
      ...healthStatus,
      responseTime,
    });
  } catch (error) {
    healthStatus.status = 'error';
    res.status(503).json({
      ...healthStatus,
      error: error instanceof Error ? error.message : 'Unknown error',
    });
  }
});

export default router;
```

### **Environment Variables - SICUREZZA ASSOLUTA**

```bash
# MAI committare questi valori - solo in Render Dashboard

# Core Configuration
NODE_ENV=production
PORT=10000

# Database
DATABASE_URL=postgresql://username:password@host:port/database
DATABASE_SSL=true
DATABASE_POOL_SIZE=10
DATABASE_IDLE_TIMEOUT=30000

# Authentication & Security
JWT_SECRET=your-super-secret-key-here-minimum-32-characters
JWT_EXPIRES_IN=24h
JWT_REFRESH_SECRET=your-refresh-secret-key-here
JWT_REFRESH_EXPIRES_IN=7d

# External APIs
ALPHA_VANTAGE_API_KEY=your-alpha-vantage-api-key
YAHOO_FINANCE_API_KEY=your-yahoo-finance-api-key
ALPHA_VANTAGE_BASE_URL=https://www.alphavantage.co/query
YAHOO_FINANCE_BASE_URL=https://query1.finance.yahoo.com/v8/finance

# CORS & Networking
CORS_ORIGIN=https://student-analyst.vercel.app
CORS_CREDENTIALS=true
CORS_MAX_AGE=86400

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_MESSAGE=Too many requests from this IP

# Render Specific
RENDER_EXTERNAL_URL=https://student-analyst.onrender.com
RENDER_SERVICE_NAME=student-analyst-backend
RENDER_SERVICE_ID=your-service-id

# Logging
LOG_LEVEL=info
LOG_FORMAT=json
ENABLE_REQUEST_LOGGING=true

# Cache Configuration
REDIS_URL=redis://username:password@host:port
CACHE_TTL=3600
CACHE_MAX_SIZE=1000

# Performance
REQUEST_TIMEOUT=30000
RESPONSE_TIMEOUT=30000
MAX_REQUEST_SIZE=10mb

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
HEALTH_CHECK_INTERVAL=30000
```

### **Environment Validation - SEMPRE OBBLIGATORIO**

```typescript
// src/utils/envValidator.ts
import { config } from 'dotenv';

config();

interface EnvironmentConfig {
  NODE_ENV: string;
  PORT: number;
  DATABASE_URL: string;
  JWT_SECRET: string;
  ALPHA_VANTAGE_API_KEY: string;
  CORS_ORIGIN: string;
  RENDER_EXTERNAL_URL: string;
}

const requiredEnvVars: (keyof EnvironmentConfig)[] = [
  'NODE_ENV',
  'PORT',
  'DATABASE_URL',
  'JWT_SECRET',
  'ALPHA_VANTAGE_API_KEY',
  'CORS_ORIGIN',
  'RENDER_EXTERNAL_URL',
];

export function validateEnvironment(): EnvironmentConfig {
  const missingVars: string[] = [];

  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      missingVars.push(envVar);
    }
  }

  if (missingVars.length > 0) {
    throw new Error(
      `Missing required environment variables: ${missingVars.join(', ')}`
    );
  }

  // Validate JWT_SECRET length
  if (process.env.JWT_SECRET!.length < 32) {
    throw new Error('JWT_SECRET must be at least 32 characters long');
  }

  // Validate PORT
  const port = parseInt(process.env.PORT!);
  if (isNaN(port) || port < 1 || port > 65535) {
    throw new Error('PORT must be a valid port number (1-65535)');
  }

  return {
    NODE_ENV: process.env.NODE_ENV!,
    PORT: port,
    DATABASE_URL: process.env.DATABASE_URL!,
    JWT_SECRET: process.env.JWT_SECRET!,
    ALPHA_VANTAGE_API_KEY: process.env.ALPHA_VANTAGE_API_KEY!,
    CORS_ORIGIN: process.env.CORS_ORIGIN!,
    RENDER_EXTERNAL_URL: process.env.RENDER_EXTERNAL_URL!,
  };
}

export const envConfig = validateEnvironment();
```

---

## 🔧 GIT & COMMIT RULES - STANDARDS OBBLIGATORI

### **Conventional Commits - SEMPRE OBBLIGATORIO**

```bash
# Formato: <type>[scope]: <description>
feat(api): add financial data analysis endpoint
fix(ui): resolve chart rendering issue in dashboard
docs(readme): update deployment instructions
refactor(cache): optimize IndexedDB storage strategy
test(e2e): add user authentication flow tests
chore(deps): update Vite to latest version

# Breaking changes
feat!: breaking change in API response format
# oppure
BREAKING CHANGE: API now returns data in new format

# Esempi specifici per Student Analyst
feat(api): add Alpha Vantage integration for real-time stock data
fix(backend): resolve TypeScript compilation errors in batchProcessor
refactor(cache): implement three-tier caching system
test(api): add comprehensive financial API endpoint tests
docs(deploy): update Render deployment troubleshooting guide
chore(deps): update Express.js to v4.18.2 for security patches
```

### **Branch Naming - SEMPRE OBBLIGATORIO**

```bash
# Feature branches
feature/financial-data-api
feature/user-authentication
feature/real-time-charts
feature/cache-optimization

# Fix branches
fix/api-error-handling
fix/typescript-compilation
fix/cors-configuration
fix/health-check-endpoint

# Refactor branches
refactor/cache-system
refactor/api-structure
refactor/error-handling
refactor/security-middleware

# Documentation branches
docs/vercel-deployment
docs/render-troubleshooting
docs/api-documentation
docs/security-guidelines

# Testing branches
test/e2e-coverage
test/api-integration
test/performance-benchmarks
test/security-tests

# Hotfix branches
hotfix/critical-security-fix
hotfix/deployment-failure
hotfix/api-timeout
hotfix/database-connection
```

### **Workflow Operativo - SEMPRE OBBLIGATORIO**

```bash
# 1. Crea feature branch da main
git checkout main
git pull origin main
git checkout -b feature/nome-feature

# 2. Sviluppa e committa
git add .
git commit -m "feat(scope): description"

# 3. Push e crea PR
git push origin feature/nome-feature
# Crea Pull Request su GitHub

# 4. Dopo merge, elimina branch
git checkout main
git pull origin main
git branch -d feature/nome-feature

# 5. Verifica deploy
curl -f https://student-analyst.onrender.com/health
```

### **Pull Request Template - SEMPRE OBBLIGATORIO**

```markdown
## 📋 Descrizione

Breve descrizione delle modifiche implementate

## ✅ Checklist

- [ ] Aggiunta nuova funzionalità
- [ ] Fix bug esistente
- [ ] Refactoring codice
- [ ] Aggiornamento documentazione
- [ ] Test coverage >80%
- [ ] TypeScript check passa
- [ ] ESLint check passa
- [ ] Build locale funziona

## 🧪 Testing

- [ ] Unit tests passano
- [ ] E2E tests passano
- [ ] Testato localmente
- [ ] Health check funziona
- [ ] API endpoints testati
- [ ] CORS configuration verificata
- [ ] Rate limiting testato

## 📋 Quality

- [ ] Codice segue coding standards
- [ ] Documentazione aggiornata
- [ ] Commit messages convenzionali
- [ ] Nessun console.log o debug code
- [ ] Error handling implementato
- [ ] Input validation attiva
- [ ] Security measures implementate

## 🔒 Security

- [ ] Nessun secret hardcoded
- [ ] Input sanitization attiva
- [ ] Rate limiting configurato
- [ ] CORS origin specifico
- [ ] JWT authentication verificata

## 🚀 Deployment

- [ ] Environment variables configurate
- [ ] Procfile aggiornato
- [ ] Build script funziona
- [ ] Health check endpoint attivo
- [ ] Logs verificati

## 🔗 Riferimenti

Fixes #123
Related to #456
```

---

## 🚀 DEPLOYMENT WORKFLOW - REGOLE CRITICHE

### **Pre-Deploy Checklist - SEMPRE VERIFICARE**

- [ ] TypeScript check passa (`tsc --noEmit`)
- [ ] Lint check passa (`npm run lint`)
- [ ] Tests passano (`npm run test`)
- [ ] Build locale funziona (`npm run build`)
- [ ] Environment variables configurate in Render
- [ ] Health check endpoint implementato
- [ ] CORS configurato per frontend Vercel
- [ ] Database connection testato
- [ ] External APIs funzionanti
- [ ] Rate limiting configurato
- [ ] Security middleware attivo

### **Deploy Process - SEMPRE SEGUIRE**

```bash
# 1. Verifica locale completa
npm run type-check
npm run lint
npm run test
npm run build

# 2. Test health check locale
curl -f http://localhost:10000/health

# 3. Test API endpoints locali
curl -f http://localhost:10000/api/test
curl -f http://localhost:10000/api/financial/AAPL

# 4. Commit e push
git add .
git commit -m "feat(api): add new endpoint"
git push origin main

# 5. Monitora deploy su Render Dashboard
# 6. Verifica health check
curl -f https://student-analyst.onrender.com/health

# 7. Test API endpoints
curl -f https://student-analyst.onrender.com/api/test
curl -f https://student-analyst.onrender.com/api/financial/AAPL
```

### **Post-Deploy Verification - SEMPRE OBBLIGATORIO**

```bash
# Health check completo
curl -f https://student-analyst.onrender.com/health

# API test
curl -f https://student-analyst.onrender.com/api/test

# Financial API test
curl -f https://student-analyst.onrender.com/api/financial/AAPL

# CORS test
curl -H "Origin: https://student-analyst.vercel.app" \
     -H "Access-Control-Request-Method: GET" \
     -H "Access-Control-Request-Headers: Content-Type" \
     -X OPTIONS \
     https://student-analyst.onrender.com/api/financial/AAPL

# Rate limiting test
for i in {1..5}; do
  curl -f https://student-analyst.onrender.com/api/test
  sleep 1
done

# Performance test
curl -w "@curl-format.txt" -o /dev/null -s https://student-analyst.onrender.com/health
```

---

## 🔒 SECURITY RULES - SEMPRE OBBLIGATORIE

### **Authentication & Authorization**

```typescript
// src/middleware/auth.ts
import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    email: string;
    role: string;
    permissions: string[];
  };
}

export const authenticateToken = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({
      error: 'Access token required',
      code: 'MISSING_TOKEN',
    });
  }

  jwt.verify(token, process.env.JWT_SECRET!, (err: any, decoded: any) => {
    if (err) {
      return res.status(403).json({
        error: 'Invalid or expired token',
        code: 'INVALID_TOKEN',
      });
    }

    req.user = {
      id: decoded.id,
      email: decoded.email,
      role: decoded.role,
      permissions: decoded.permissions || [],
    };

    next();
  });
};

export const requireRole = (roles: string[]) => {
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        code: 'AUTH_REQUIRED',
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        error: 'Insufficient permissions',
        code: 'INSUFFICIENT_PERMISSIONS',
      });
    }

    next();
  };
};

export const requirePermission = (permission: string) => {
  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        code: 'AUTH_REQUIRED',
      });
    }

    if (!req.user.permissions.includes(permission)) {
      return res.status(403).json({
        error: 'Permission denied',
        code: 'PERMISSION_DENIED',
      });
    }

    next();
  };
};
```

### **CORS Configuration - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/cors.ts
import cors from 'cors';

const allowedOrigins = [
  'https://student-analyst.vercel.app',
  'https://student-analyst-git-main.vercel.app',
  'https://student-analyst-git-feature.vercel.app',
  'http://localhost:3000',
  'http://localhost:5173',
];

const corsOptions = {
  origin: (
    origin: string | undefined,
    callback: (err: Error | null, allow?: boolean) => void
  ) => {
    // Allow requests with no origin (like mobile apps or curl requests)
    if (!origin) return callback(null, true);

    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  optionsSuccessStatus: 200,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: [
    'Origin',
    'X-Requested-With',
    'Content-Type',
    'Accept',
    'Authorization',
    'X-API-Key',
  ],
  exposedHeaders: ['X-Total-Count', 'X-Page-Count'],
  maxAge: 86400, // 24 hours
};

export const corsMiddleware = cors(corsOptions);
```

### **Rate Limiting - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/rateLimit.ts
import rateLimit from 'express-rate-limit';
import RedisStore from 'rate-limit-redis';
import Redis from 'ioredis';

const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');

// General API rate limiting
export const generalLimiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args: string[]) => redis.call(...args),
  }),
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'), // 15 minutes
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100'), // limit each IP to 100 requests per windowMs
  message: {
    error: process.env.RATE_LIMIT_MESSAGE || 'Too many requests from this IP',
    code: 'RATE_LIMIT_EXCEEDED',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: req => {
    return req.ip || req.connection.remoteAddress || 'unknown';
  },
  skip: req => {
    // Skip rate limiting for health checks
    return req.path === '/health';
  },
});

// Financial API specific rate limiting (more restrictive)
export const financialApiLimiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args: string[]) => redis.call(...args),
  }),
  windowMs: 60 * 1000, // 1 minute
  max: 30, // limit each IP to 30 requests per minute for financial data
  message: {
    error:
      'Too many financial data requests. Please wait before making more requests.',
    code: 'FINANCIAL_RATE_LIMIT_EXCEEDED',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: req => {
    return req.ip || req.connection.remoteAddress || 'unknown';
  },
});

// Authentication rate limiting (very restrictive)
export const authLimiter = rateLimit({
  store: new RedisStore({
    sendCommand: (...args: string[]) => redis.call(...args),
  }),
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 login attempts per 15 minutes
  message: {
    error: 'Too many authentication attempts. Please try again later.',
    code: 'AUTH_RATE_LIMIT_EXCEEDED',
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: req => {
    return req.ip || req.connection.remoteAddress || 'unknown';
  },
});
```

### **Input Validation & Sanitization - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/validation.ts
import { body, param, query, validationResult } from 'express-validator';
import { Request, Response, NextFunction } from 'express';

// Financial data validation
export const validateFinancialData = [
  body('symbol')
    .isString()
    .isLength({ min: 1, max: 10 })
    .matches(/^[A-Z]{1,10}$/)
    .withMessage('Symbol must be 1-10 uppercase letters'),

  body('timeframe')
    .isIn(['1d', '1w', '1m', '3m', '1y', '5y', 'max'])
    .withMessage('Invalid timeframe'),

  body('interval')
    .optional()
    .isIn([
      '1min',
      '5min',
      '15min',
      '30min',
      '60min',
      'daily',
      'weekly',
      'monthly',
    ])
    .withMessage('Invalid interval'),

  body('limit')
    .optional()
    .isInt({ min: 1, max: 1000 })
    .withMessage('Limit must be between 1 and 1000'),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation failed',
        code: 'VALIDATION_ERROR',
        details: errors.array(),
      });
    }
    next();
  },
];

// User authentication validation
export const validateLogin = [
  body('email').isEmail().normalizeEmail().withMessage('Valid email required'),

  body('password')
    .isLength({ min: 8 })
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/)
    .withMessage(
      'Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character'
    ),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation failed',
        code: 'VALIDATION_ERROR',
        details: errors.array(),
      });
    }
    next();
  },
];

// URL parameter validation
export const validateSymbol = [
  param('symbol')
    .isString()
    .isLength({ min: 1, max: 10 })
    .matches(/^[A-Z]{1,10}$/)
    .withMessage('Symbol must be 1-10 uppercase letters'),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Invalid symbol parameter',
        code: 'INVALID_SYMBOL',
        details: errors.array(),
      });
    }
    next();
  },
];

// Query parameter validation
export const validateQueryParams = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Page must be a positive integer'),

  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Limit must be between 1 and 100'),

  query('sort')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Sort must be either asc or desc'),

  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Invalid query parameters',
        code: 'INVALID_QUERY_PARAMS',
        details: errors.array(),
      });
    }
    next();
  },
];
```

### **Input Sanitization - SEMPRE OBBLIGATORIO**

```typescript
// src/middleware/sanitization.ts
import { Request, Response, NextFunction } from 'express';
import DOMPurify from 'isomorphic-dompurify';

interface SanitizedRequest extends Request {
  body: any;
  query: any;
  params: any;
}

export const sanitizeInput = (
  req: SanitizedRequest,
  res: Response,
  next: NextFunction
) => {
  // Sanitize request body
  if (req.body) {
    req.body = sanitizeObject(req.body);
  }

  // Sanitize query parameters
  if (req.query) {
    req.query = sanitizeObject(req.query);
  }

  // Sanitize URL parameters
  if (req.params) {
    req.params = sanitizeObject(req.params);
  }

  next();
};

function sanitizeObject(obj: any): any {
  if (typeof obj !== 'object' || obj === null) {
    return typeof obj === 'string' ? DOMPurify.sanitize(obj) : obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(item => sanitizeObject(item));
  }

  const sanitized: any = {};
  for (const [key, value] of Object.entries(obj)) {
    sanitized[key] = sanitizeObject(value);
  }

  return sanitized;
}

// Specific sanitization for financial data
export const sanitizeFinancialData = (
  req: SanitizedRequest,
  res: Response,
  next: NextFunction
) => {
  if (req.body.symbol) {
    req.body.symbol = req.body.symbol
      .toString()
      .toUpperCase()
      .replace(/[^A-Z]/g, '');
  }

  if (req.body.timeframe) {
    const allowedTimeframes = ['1d', '1w', '1m', '3m', '1y', '5y', 'max'];
    if (!allowedTimeframes.includes(req.body.timeframe)) {
      return res.status(400).json({
        error: 'Invalid timeframe',
        code: 'INVALID_TIMEFRAME',
      });
    }
  }

  next();
};
```

---

## 🚨 TROUBLESHOOTING - REGOLE CRITICHE

### **Build Errors - SEMPRE VERIFICARE**

```bash
# 1. TypeScript check
tsc --noEmit

# 2. Lint check
npm run lint

# 3. Test check
npm run test

# 4. Build check
npm run build

# 5. Check for specific errors
grep -r "any" src/ --include="*.ts"
grep -r "console.log" src/ --include="*.ts"
grep -r "TODO" src/ --include="*.ts"
```

### **Common TypeScript Errors - SOLUZIONI SPECIFICHE**

```bash
# Error: Cannot find module
npm install @types/node @types/express

# Error: Property does not exist on type
# Aggiungi interfaccia o usa type assertion

# Error: Object is possibly undefined
# Usa optional chaining (?.) o nullish coalescing (??)

# Error: Type is not assignable
# Verifica tipi e usa type guards
```

### **Deployment Issues - CHECKLIST OBBLIGATORIA**

- [ ] Environment variables configurate in Render Dashboard
- [ ] Procfile presente e corretto
- [ ] Health check endpoint funzionante
- [ ] Build locale funziona
- [ ] Tests passano
- [ ] TypeScript check passa
- [ ] CORS configurato correttamente
- [ ] Database connection attiva
- [ ] External APIs funzionanti
- [ ] Rate limiting configurato
- [ ] Security middleware attivo

### **Specific Error Solutions - BASATE SUI PROBLEMI RISOLTI**

```bash
# Error: 404 Not Found
# Verifica che il server stia girando su dist/index.js
# Controlla che il Procfile sia corretto

# Error: 400 Bad Request
# Verifica sanitization middleware
# Controlla input validation

# Error: 500 Internal Server Error
# Controlla logs su Render Dashboard
# Verifica database connection
# Controlla external API calls

# Error: CORS issues
# Verifica CORS configuration
# Controlla allowed origins

# Error: Rate limiting
# Verifica Redis connection
# Controlla rate limit configuration
```

### **Log Analysis - PATTERNS CRITICI**

```bash
# Cerca errori nei logs
grep -i "error" logs.txt

# Cerca timeout
grep -i "timeout" logs.txt

# Cerca memory issues
grep -i "memory" logs.txt

# Cerca database errors
grep -i "database\|postgres\|connection" logs.txt

# Cerca API errors
grep -i "api\|fetch\|request" logs.txt
```

### **Common Fixes - SEMPRE VERIFICARE**

```bash
# Clear cache
rm -rf node_modules package-lock.json
npm install

# Clear build cache
rm -rf dist/
npm run build

# Restart service
# Render Dashboard > Manual Deploy > Restart service

# Check logs
# Render Dashboard > Logs

# Verify environment variables
# Render Dashboard > Environment

# Test health check
curl -f https://student-analyst.onrender.com/health

# Test API endpoints
curl -f https://student-analyst.onrender.com/api/test
```

---

## ✅ BEST PRACTICES CHECKLIST

### **Pre-Deploy - SEMPRE VERIFICARE**

- [ ] TypeScript strict mode attivo
- [ ] Tutti gli errori gestiti con try/catch
- [ ] Environment variables configurate
- [ ] Tests passano (>80% coverage)
- [ ] Lint passa senza errori
- [ ] Build locale funziona
- [ ] Health check endpoint attivo
- [ ] Database connection testata
- [ ] External APIs funzionanti
- [ ] Security middleware attivo
- [ ] Rate limiting configurato
- [ ] CORS configuration corretta

### **Code Quality - SEMPRE VERIFICARE**

- [ ] Nessun `any` in TypeScript
- [ ] Interfacce definite per tutti i data
- [ ] Error handling implementato
- [ ] Input validation attiva
- [ ] Input sanitization attiva
- [ ] Rate limiting configurato
- [ ] CORS configurato correttamente
- [ ] Logging implementato
- [ ] Metrics collection attiva
- [ ] Performance monitoring attivo

### **Security - SEMPRE VERIFICARE**

- [ ] Nessun secret hardcoded
- [ ] JWT authentication implementata
- [ ] Input validation implementata
- [ ] Input sanitization implementata
- [ ] Rate limiting attivo
- [ ] HTTPS sempre
- [ ] CORS origin specifico
- [ ] SQL injection prevention
- [ ] XSS protection
- [ ] CSRF protection

---

## 🎯 QUICK REFERENCE

### **Comandi Critici**

```bash
# Development
npm run dev          # Nodemon dev server
npm run build        # TypeScript build
npm run test         # Run tests
npm run lint         # ESLint check
tsc --noEmit         # TypeScript check

# Deployment
git push origin main # Trigger Render deploy
curl https://student-analyst.onrender.com/health # Health check

# Troubleshooting
npm run type-check   # TypeScript check
npm run test:coverage # Test coverage
# Render Dashboard > Logs # View logs

# Testing
curl -f https://student-analyst.onrender.com/health
curl -f https://student-analyst.onrender.com/api/test
curl -f https://student-analyst.onrender.com/api/financial/AAPL
```

### **File Critici**

- `Procfile` - Render configuration
- `package.json` - Scripts and dependencies
- `tsconfig.json` - TypeScript configuration
- `src/routes/health.ts` - Health check endpoint
- `src/middleware/` - Security middleware
- `.env.example` - Environment template
- `src/utils/envValidator.ts` - Environment validation

### **URLs Critici**

- Backend: https://student-analyst.onrender.com
- Health Check: https://student-analyst.onrender.com/health
- API Test: https://student-analyst.onrender.com/api/test
- Financial API: https://student-analyst.onrender.com/api/financial/AAPL

### **Environment Variables Critiche**

```bash
# Obbligatorie
NODE_ENV=production
DATABASE_URL=postgresql://...
JWT_SECRET=your-secret-key
ALPHA_VANTAGE_API_KEY=your-api-key
CORS_ORIGIN=https://student-analyst.vercel.app

# Opzionali ma raccomandate
REDIS_URL=redis://...
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
```

---

**⚠️ REGOLA FINALE: SEMPRE VERIFICARE PRIMA DI DEPLOYARE**

**Ogni deploy deve passare attraverso:**

1. ✅ TypeScript compilation
2. ✅ ESLint check
3. ✅ Test suite
4. ✅ Build verification
5. ✅ Health check test
6. ✅ API endpoint test
7. ✅ CORS verification
8. ✅ Security validation
