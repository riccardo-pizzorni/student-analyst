PROMPT MASTER DEFINITIVO: TRASFORMAZIONE STUDENT ANALYST DA 95% A 100% CODE PERFECTION - ZERO RISK EXECUTION

CONTESTO: Student Analyst è un'applicazione finanziaria React/TypeScript con backend Node.js che ha raggiunto 121/121 test E2E (100% successo) ma presenta 9 errori di linting e 446 warnings che devono essere eliminati mantenendo piena funzionalità. OBIETTIVO FINALE: Eliminare ogni singolo errore e warning raggiungendo 100% code perfection mantenendo funzionalità e test al 100%. STATO BASELINE: Test E2E 121/121 (100%) DA MANTENERE ASSOLUTAMENTE, Funzionalità App 100% operativa DA PRESERVARE, Build Successful con warnings DA PERFEZIONARE, Lint Errors 9 errori DA ELIMINARE, Lint Warnings 446 warnings DA ELIMINARE.

ZERO-RISK PROTOCOL OBBLIGATORIO: Prima di iniziare eseguire git add . && git commit -m "BACKUP: Before code perfection process", poi npx playwright test tests/e2e/tier-1-smoke-testing.spec.ts --reporter=line per verificare baseline, dopo ogni modifica eseguire npx playwright test tests/e2e/tier-1-smoke-testing.spec.ts --timeout=10000 e SE FALLISCE eseguire immediatamente git reset --hard HEAD~1 per rollback.

FASE 1 ELIMINAZIONE 9 ERRORI CRITICI: FIX 1 backend/src/routes/errorHandlingRoutes.ts linea 75 sostituire "error: { message: 'string', stack?: 'string' }" con "error: { message: 'string', stack: 'string | undefined' }", FIX 2 backend/src/services/apiRateLimiter.ts linee 176-178 rimuovere completamente blocco "} catch (batchError) { throw batchError; }" e sostituire con "} finally { this.currentBatchId = undefined; }", FIX 3 backend/src/services/dateNormalizer.ts linea 367 sostituire "if (item.hasOwnProperty(field) && item[field] != null)" con "if (Object.prototype.hasOwnProperty.call(item, field) && item[field] != null)", FIX 4 backend/src/services/volumeHandler.ts linea 498 sostituire "if (item.hasOwnProperty(field) && item[field] != null)" con "if (Object.prototype.hasOwnProperty.call(item, field) && item[field] != null)", FIX 5 backend/src/utils/dataSanitizer.ts linee 47-50 sostituire regex con escape non necessari rimuovendo backslash superflui, FIX 6 backend/src/index.ts linea 218 aggiungere import "import express, { Request, Response, NextFunction } from 'express';" e sostituire "app.use((error: Error, req: Request, res: Response, next: any) => {" con "app.use((error: Error, req: Request, res: Response, next: NextFunction) => {", dopo ogni fix verificare con npm run lint che errori diminuiscano.

FASE 2 ELIMINAZIONE ANY TYPES 350+ instances: Creare file src/types/api.ts con "export interface ApiResponse<T = unknown> { data?: T; error?: string; message?: string; success?: boolean; status?: number; } export interface MarketDataResponse { symbol: string; price: number; volume: number; timestamp: string; } export interface CalculationResult { value: number; error?: string; metadata?: Record<string, unknown>; }" poi sostituire TUTTI "const data: any = await response.json();" con "const data: ApiResponse<MarketDataResponse> = await response.json();", aggiungere import React types "import { MouseEvent, ChangeEvent, FormEvent, KeyboardEvent } from 'react';" e sostituire "const handleClick = (event: any) => {}, const onChange = (e: any) => {}, const onSubmit = (event: any) => {}" con "const handleClick = (event: MouseEvent<HTMLButtonElement>) => {}, const onChange = (e: ChangeEvent<HTMLInputElement>) => {}, const onSubmit = (event: FormEvent<HTMLFormElement>) => {}", creare file src/types/config.ts con "export interface ChartConfig { type: 'line' | 'bar' | 'pie'; data: number[]; labels: string[]; options?: Record<string, unknown>; } export interface ApiConfig { baseURL: string; timeout: number; retries: number; headers?: Record<string, string>; }" e sostituire "const config: any = {};" con "const config: ChartConfig = {};", sostituire TUTTI "catch (error: any) { console.log(error); }" con "catch (error: unknown) { if (error instanceof Error) { console.error('Error:', error.message); } else { console.error('Unknown error:', String(error)); } }".

FASE 3 REACT HOOKS DEPENDENCIES 50+ warnings: Identificare tutti useEffect con dependency warnings e applicare pattern "useEffect(() => { fetchData(symbol, timeframe); }, []);" diventa "const fetchDataCallback = useCallback((sym: string, tf: string) => { fetchData(sym, tf); }, []); useEffect(() => { if (symbol && timeframe) { fetchDataCallback(symbol, timeframe); } }, [symbol, timeframe, fetchDataCallback]);", per oggetti pesanti usare "const chartOptions = useMemo(() => ({ responsive: true, scales: { y: { beginAtZero: true } } }), []);".

FASE 4 TYPESCRIPT STRICT COMPLIANCE: Sostituire "const element = document.getElementById('chart'); element.getContext('2d');" con "const element = document.getElementById('chart') as HTMLCanvasElement | null; if (!element) { throw new Error('Chart element not found'); } const context = element.getContext('2d'); if (!context) { throw new Error('Canvas context not available'); }", aggiungere tipi di ritorno espliciti "function calculateReturns(prices: number[]): number { return (prices[prices.length - 1] - prices[0]) / prices[0]; } async function fetchMarketData(symbol: string): Promise<MarketDataResponse> { const response = await fetch(`/api/data/${symbol}`); return response.json() as MarketDataResponse; }".

FASE 5 ESLINT RULES COMPLIANCE: Sostituire "console.log('Debug info');" con "const logger = { info: (msg: string) => process.env.NODE_ENV === 'development' && console.log(msg) }; logger.info('Debug info');", rimuovere variabili inutilizzate o prefissare con underscore "const _unusedVariable = someValue;", sostituire let con const dove possibile "const immutableValue = 'constant';".

FASE 6 AUTOMATED CLEANUP: Eseguire in sequenza "npx prettier --write "src/**/*.{ts,tsx,js,jsx}" --config .prettierrc", "npx eslint "src/**/*.{ts,tsx,js,jsx}" --fix --ext .ts,.tsx,.js,.jsx", "npx eslint "backend/src/**/*.{ts,js}" --fix --ext .ts,.js".

FASE 7 FINAL VERIFICATION PROTOCOL: Eseguire sequenza obbligatoria "npm run lint" risultato atteso 0 errors 0 warnings, "npx tsc --noEmit" risultato atteso no errors, "npm run build" risultato atteso successful build no warnings, "npx playwright test tests/e2e/tier-1-smoke-testing.spec.ts" risultato atteso all tests passed, "npx playwright test tests/e2e/" risultato atteso 121/121 passed, "npm run dev &" seguito da "sleep 10" e "curl -f http://localhost:5173 > /dev/null && echo 'App responsive' || echo 'App failed'" per verificare funzionalità app.

SUCCESS CRITERIA FINALE tutti devono essere soddisfatti: Lint Perfect 0 errors 0 warnings, TypeScript Perfect 0 type errors, Build Perfect clean build no warnings, Tests Perfect 121/121 E2E tests passing, App Perfect fully functional responsive, Performance build size reasonable load times optimal.

EMERGENCY ROLLBACK PROTOCOL se qualsiasi verifica fallisce: "git reset --hard HEAD~1" per rollback ultimo commit, "npm run dev" per verificare funzionalità, "npx playwright test tests/e2e/tier-1-smoke-testing.spec.ts" per verificare test, se OK riprovare fase fallita con più attenzione, se NON OK investigare problema prima di continuare.

MONITORING creare file quality-check.sh con "#!/bin/bash echo 'STUDENT ANALYST QUALITY DASHBOARD' echo '=======================================' echo 'Lint Errors: $(npm run lint 2>&1 | grep -c 'error')' echo 'Lint Warnings: $(npm run lint 2>&1 | grep -c 'warning')' echo 'TypeScript Errors: $(npx tsc --noEmit 2>&1 | grep -c 'error')' echo 'E2E Tests: $(npx playwright test tests/e2e/ --reporter=json 2>/dev/null | jq '.stats.expected' 2>/dev/null || echo 'Run tests to see')' echo 'Build Status: $(npm run build >/dev/null 2>&1 && echo 'SUCCESS' || echo 'FAILED')' echo '======================================='".

ESECUZIONE: Seguire ogni fase in sequenza verificare ogni checkpoint raggiungere 100% code perfection con zero rischi mantenendo sempre funzionalità al 100% e 121/121 test E2E passanti. Questo è il prompt completo definitivo per trasformare Student Analyst da buona qualità a perfezione assoluta del codice. 